var tipuesearch = {"pages":[{"title":"Contact","text":"Feel free to leave me a comment or contact me through my Github profile .","tags":"pages","url":"pages/contact.html","loc":"pages/contact.html"},{"title":"Prioritize, Automate, Parallize (PAP)","text":"Notes and inspirations from, https://www.youtube.com/watch?v=An95XjT7r6Y. It talks about a framework to improve work efficiency and stay focused. Prioritize Kanban board Use Kanban board to manage tasks and backlogs. Boards are organized into following columns Backlog Weekly todo Today todo Completed New tasks are put into backlog and waiting for pick up. At beginning of the week, pick items from backlog and put them into this week's todo column. During the day, move item you finished into completed column. At end of each day, move items you want to do next day from weekly todo into today's todo so that you can pick them up next day. Blocked time Each day, block a certan amount of time to avoid meetings so that you can focus on work. For other things like checking emails or IM, set aside some slots during the day. Remember to turn off notification from these commnication channels. Pomodoro? Automate Use automations on computer to simplify and reduce repetive tasks. Alfred is a good tool to automate things on mac. Parallize Parallize tasks Some tasks can be handled in parallel. Some examples CR reviews, these usually take a long time and requires waiting for other's comment. Several CRs that don't affect each other can run in parallel. long build tasks, some tasks take a long time to build or see results. These tasks can run in parallel in conjunction with other tasks. Delegate As you gain more knowledge on certain domain, you becomes the SME and you can delegate certain tasks to other engineers. It's a good learning opportunity to them, and it frees you to take on more challenging and interesting tasks. Knowledge sharing Wiki page is a great resources for others to look up instructions. FAQ section is a great place to answer popular questions. It allows others to unblock themselves without reaching out to you. It saves you a lot of time from responding to others and unblock them.","tags":"reading_notes","url":"prioritize-automate-parallize-pap.html","loc":"prioritize-automate-parallize-pap.html"},{"title":"The Effective Engineer - Reading notes","text":"Link to book, https://www.amazon.ca/Effective-Engineer-Engineering-Disproportionate-Meaningful/dp/0996128107 Foreword Intead of trying to solve impossible problmes, he would more often challenge the assumptions so we could simply work around then. \"How should we do this?\" -> \"Why do we need to do it at all?\" Ask questions often before take actions. This can help us avoid unnecessary tasks/work. Introduction To be effective engineers, we need to be able to identify which activities produce more impact with smaller time investments. Not all work is created equal, not all efforst translate into impact. An effective engineer, therefore, is defined by the rate at which he or she produces value per unit of time worked. A prime example is over engineering. There is no need to build something that can support millions of users when only a handful of people will use it. a useful framework, leverage, for analyzing the effectivenss of different activities","tags":"reading_notes","url":"the-effective-engineer-reading-notes.html","loc":"the-effective-engineer-reading-notes.html"},{"title":"Home Lab","text":"Introduction This article summarizes my home lab setup. I used the setup to server entertainment and to support software development in my free time. The entire set runs on an laptop with 32GB of memory with Ubuntu 18.04 installed. This is just a premliminary setup as I add more stuff over the years. I might switch to a proper hypervisor installation in the future. Docker, Virtual Box and Server itself I divide my services into 3 partitions. [Host] support services that run on the host system. These are the crucial services that I always need, such as Nginx and bind DNS server. [Docker] Services that can be containerized. and sometimes are one off experiments. [VirtualBox] Services that might interfere with host network and I want to keep it separated. So services that host OS doesn't support. Host services In host, I installed webmin for each remote management on the host itself. This way, I can directly get system information on the host. Through webmin, I installed nginx and bind DNS. bind DNS It runs as a DNS resolver for my home network. Rather than accessing my other services using IP addresses, I create DNS entires for these services' IP in bind DNS. So that I can access them using a URL. Nginx Reverse proxy for services. It redirects requests to services. Plex Home entertainment services. Plex looks at my data volume where I stored all my movies and TV shows. I'm able to acess my library on my phone using Plex's app. There is also a web UI available. I can also cast my media to TV through Chromecast. I installed Plex on host to avoid file permission issues on my data volume. I have other services adding content to the data volume in docker and it's tricky to setup Plex in docker to share the same user. Docker Nextcloud Nextcloud server cloud storage services to my home network. I persist its data by mounting a folder in the data volume into the docker. OpenVPN To allow connect to home network from outside, I run a OpenVPN inside a docker. Watchtower Watchtower automatically updates all docker containers to their latest images. Portainer An admin web UI to see and mamange running containers. Pihole DNS based ad blocker VirtualBox OneDrive I have a windows machine running in VirtualBox. It syncs my Onedrive and share the Onedrive folder over samba in my home network. I don't need to map static IP to this machine because windows machines are dicoverable in local network. GameServers I also have some VMs running as game servers. DNS resolution To resolve local DNS name and perform add filtering using pihole. I've set ISP's modem to use bind DNS as look up server. Bind DNS resolves local DNS names and forward the rest to pihole. Pihole filter out blacklisted ad domains and forward the rest to 1.1.1.1 and 1.0.0.1 .","tags":"misc","url":"home-lab.html","loc":"home-lab.html"},{"title":"Setup VNC","text":"Introduction There a lot of times we need to remote access a server. VNC is one of the commonly used tools. I have a lot of troubles setting up VNC server before. Here are the notes I've collected to setup a functioning VNC server. Glossary TightVNC, VNC server. xfce, a light desktop environment. Intallation Install desktop environment In order to remote into server's desktop environment, we need to install a desktop environment first. We use xfce here. Install xfce and related components using following commands. sudo apt updatesudo apt install xfce4 xfce4-goodies Install TightVNC We use TightVNC as VNC server. sudo apt install tightvncserver To initalize VNC server's configuration. Run following command as the user your will be login remotely. vncserver A promot will ask your to enter and verify your remote password. You will require a password to access your desktops . Password : Verify : After this, select n to not create a view-only password. Configure TightVNC First stop the vncserver that is running using default configuraiton file. > vncserver -kill :1 Killing Xtightvnc process ID 17648 Replace the configuration file ~/.vnc/xstartup using following content. 1 2 3 4 5 6 7 8 9 10 11 #!/bin/sh /etc/X11/Xsession def export XKL_XMODMAP_DISABLE = 1 unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS xrdb $HOME /.Xresources xsetroot -solid grey autocutsel -fork startxfce4 & Set proper permission for this file, chmod +x ~/.vnc/xstartup Restart the VNC server > vncserver New 'X' desktop is your_hostname : 1 Starting applications specified in / home / vncuser / . vnc Run VNC as a system service To setup VNC server to run automatically when system boots, we setup a system service. Create a new service unit file, /etc/systemd/system/vncserver@.service . Replace <vnc_user> with your remote user. # / etc / systemd / system / vncserver @ . service [ Unit ] Description = Start TightVNC server at startup After = syslog . target network . target [ Service ] Type = forking User =< vnc_user > Group =< vnc_user > WorkingDirectory =/ home /< vnc_user > PIDFile =/ home /< vnc_user >/ . vnc /% H : % i . pid ExecStartPre =-/ usr / bin / vncserver - kill : % i > / dev / null 2 >& 1 ExecStart =/ usr / bin / vncserver - depth 24 - geometry 1280 x800 : % i ExecStop =/ usr / bin / vncserver - kill : % i [ Install ] WantedBy = multi - user . target Reload system daemon. sudo systemctl daemon - reload Enable the VNC service. sudo systemctl enable vncserver @1. service The 1 following the @ sign signifies which display number the service should appear over, in this case the default :1. Stop current running VNC server and restart it using system service. vncserver - kill : 1 sudo systemctl start vncserver @1 sudo systemctl status vncserver @1 It should show the service is running. Connect to VNC securely VNC connect is not secured by default. We can secure it using SSH tunnel. ssh -L <local_port>:127.0.0.1:5901 -C -N -L <vnc_user> <server_ip> And connect to the remote VNC server from your local port, localhost:<local_port> .","tags":"misc","url":"setup-vnc.html","loc":"setup-vnc.html"},{"title":"Dot file Management","text":"Introduction Developers have a lot of personalized configuration files, from shell profile, git configuration to IDE configurations. A lot of times, when we get a new machine, we need to configure the machine to our likes using this dot files. However, managing these files could be a pain. yadm is a project aim to solve this problem, https://yadm.io/. It's built onto of git so it has our favorite version control system. Using yadm Installing yadm On MacOS, we can install yadm using brew . brew instsall yadm On Ubuntu/Debian, we install yadm using apt-get . Configure yadm Start fresh without a remote repository Start with an empty local repository, yadm init yadm add <important file> yadm commits It works the same as git because it's built on top of git. Eventually, we want to back up everything to a remote repository. Create a git repository of your choice, for example, Github. Push local repo to this remote. yadm remote add origin <url to git repo> yadm push -u origin master Next time to push an update, just do yadm push . Using an existing remote repository If you already has an remote repository that stores your dot files. Simply clone it to your current machine. yadm clone <url to git repo> yadm status Common commands We list some common commands below. yadm status Show current local repo status, similar to git status . yadm commit Commit local changes. yadm add <path to file> Track a new file. yadm push, pull, clone Push to, pull or clone from remote repo. yadm remote add origin <remote rpo> Add a remote repo. Advanced topics There are most advanced features in yadm . You can find them at https://yadm.io/docs/bootstrap. Some notable features are. Bootstrap , setting up a bootstrap script that automatically configures machine for you Encryption , encrypt sensitive files such as SSH keys. It has symmetric and asymmetric encryption option.","tags":"misc","url":"dot-file-management.html","loc":"dot-file-management.html"},{"title":"Todo list for this site","text":"[] devserver not detecting changes in pelicanconf.py . [] Replace pelican plugins folders with git submodule.","tags":"Pelican","url":"todo-list-for-this-site.html","loc":"todo-list-for-this-site.html"},{"title":"MacOS OneDrive using VM","text":"Introduction I have been struggling on OneDrive's performance on my MacOS. It's constantly updating and whenever I reboot the machine. It will try to update the entire OneDrive folder again. I have a lot of files in OneDrive. One scan can easily take 10+ hours. OneDrive on my Windows 10 seems to perform well. So I thought, maybe I can install Windows 10 VM on my MacOS and let it sync OneDrive files for me. Goal Install Windows 10 on VM in MacOS and sync OneDrive from Windows. Setup a file sharing system between MacOS and Windows 10 so that MacOS can access these files in Windows 10 VM. User story: As a user, I want to be able to access OneDrive folder on my Windows 10 VM from MacOS. As a user, I want the OneDrive folder to be functioning and available me when I boot into MacOS. Related Work VirtualBox, https://www.virtualbox.org/, VirtualBox is a powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as home use. mount_smbfs , a command to mount smb share on MacOS Solution Install VM and Windows 10 First step is to setup VM and install Windows 10 on there. Download VirtualBox installer for MacOS from https://www.virtualbox.org/. Intall VirtualBox by double clicking the installer. Download Windows 10 installer ISO from https://www.microsoft.com/en-ca/software-download/windows10. Launch VirtualBox and create a new VM. Configure all settings to your preference, it doesn't matter. The goal is to have a functioning Windows 10 installation. In Network selection, make sure to select Bridged Adapter . This is crucial for MacOS to detect Windows samba share. Configure Windows 10 VM Now we have a Windows 10 running, go ahead and configure OneDrive to sync. Once OneDrive folder is created in your home folder. Right click the folder and choose Properties . Enable sharing in the folder using current user. Make sure your configured your network to private network so that your computer is discoverable as well. Now we have the folder shared on the network, you can confirm that from MacOS. Go to Finder on Mac and go to Shared , you should see a shared computer like desktop-xxxx , which is your Windows VM's desktop name. You can try connect to it by double clicking and enter your Windows 10's login. Auto login Windows 10 VM To allow OneDrive sharing when we boot Windows 10 VM, we need to auto login. On Windows 10 VM, Right click Start and select Run Type netplwiz and hit Enter or click OK. Uncheck Users must enter a user name and password to use this computer and click OK. Enter in your user name and the password you use to log into your system twice and click OK. Next time Windows 10 boots, it will auto login using this user. Configure MacOS to launch Windows 10 on boot and connect to the smb share We use launchagents to start VM in headless mode and connect to the smb share. Save the following file in /Users/xxxx/Library/LaunchAgents/ folder with name org.virtualbox.launch.windows10.plist . In the file content, replace xxxx with your user folder name. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version= \"1.0\" > <dict> <key> Label </key> <string> org.virtualbox.launch.windows10.plist </string> <key> ProgramArguments </key> <array> <string> /Users/xxxx/.bin/launch_vm </string> </array> <key> RunAtLoad </key> <true/> </dict> </plist> Notice it's using /Users/xxxx/.bin/launch_vm . We need to create this file, MACHINE = Windows10 / Applications / VirtualBox . app / Contents / MacOS / VBoxManage startvm $ MACHINE -- type headless # use % 40 for @ in your password until mount_smbfs '//user:pwd@desktop-gkiv4p8/Users/xxxx/OneDrive' / Users / xxxx / OneDrive do echo \"Waiting for machine to come online\" sleep 1 done Also create OneDrive folder in your MacOS user home folder. Testing That's everything. To test the setup, shutdown Windows 10 VM. Wait for Windows 10 to shut down. To test everything, using this command launchctl load org.virtualbox.launch.windows10.plist in terminal. This will start Windows 10 in headless mode and you won't see it show up. It will also mount the smb drive to OneDrive folder in your MacOS home directory. Final test Reboot MacOS and make sure OneDrive is mounted automatically and you can see files in your MacOS's OneDrive folder. Alternative Solution I've also tried Parallel Desktop as it allows to share from guest to host. But Parallel is having performance issues in latest Windows 10 and the VM constantly freezes.","tags":"VM","url":"macos-onedrive-using-vm.html","loc":"macos-onedrive-using-vm.html"},{"title":"Active voice vs passive voice","text":"Copied from, https://developers.google.com/tech-writing. Active voice vs. passive voice Estimated Time: 15 minutes The vast majority of sentences in technical writing should be in active voice. This unit teaches you how to do the following: Distinguish passive voice from active voice. Convert passive voice to active voice because active voice is usually clearer. First, watch this video, just to get the ball rolling&#94; 1 &#94;: Distinguish active voice from passive voice in simple sentences In an active voice sentence, an actor acts on a target. That is, an active voice sentence follows this formula: Active Voice Sentence = actor + verb + target A passive voice sentence reverses the formula. That is, a passive voice sentence typically follows the following formula: Passive Voice Sentence = target + verb + actor Active voice example For example, here's a short, active voice sentence: The cat sat on the mat. actor: The cat verb: sat target: the mat Passive voice examples By contrast, here's that same sentence in passive voice: The mat was sat on by the cat. target: The mat passive verb: was sat actor: the cat Some passive voice sentences omit an actor. For example: The mat was sat on. actor: unknown passive verb: was sat target: the mat Who or what sat on the mat? A cat? A dog? A T-Rex? Readers can only guess. Good sentences in technical documentation identify who is doing what to whom. Recognize passive verbs Passive verbs typically have the following formula: passive verb = form of be + past participle verb Although the preceding formula looks daunting, it is actually pretty simple: A form of be in a passive verb is typically one of the following words: is/are was/were A past participle verb is typically a plain verb plus the suffix ed . For example, the following are past participle verbs: interpreted generated formed Unfortunately, some past participle verbs are irregular; that is, the past participle form does not end with the suffix ed . For example: sat known frozen Putting the form of be and the past participle together yields passive verbs, such as the following: was interpreted is generated was formed is frozen If the phrase contains an actor, a preposition ordinarily follows the passive verb. (That preposition is often a key clue to help you spot passive voice.) The following examples combine the passive verb and the preposition: was interpreted as is generated by was formed by is frozen by Imperative verbs are typically active It is easy to mistakenly classify sentences starting with an imperative verb as passive. An imperative verb is a command. Many items in numbered lists start with imperative verbs. For example, Open and Set in the following list are both imperative verbs: Open the configuration file. Set the Frombus variable to False . Sentences that start with an imperative verb are typically in active voice, even though they do not explicitly mention an actor. Instead, sentences that start with an imperative verb imply an actor. The implied actor is you . Exercise Mark each of the following sentences as either Passive or Active : MutableInput provides read-only access. Read-only access is provided by MutableInput . Performance was measured. Python was invented by Guido van Rossum in the twentieth century. David Korn discovered the KornShell quite by accident. This information is used by the policy enforcement team. Click the Submit button. The orbit was calculated by Katherine Johnson. Click the icon to see the answer. Active . MutableInput provides read-only access. Passive . Read-only access is provided by MutableInput. Passive . Performance was measured. Passive . Python was invented by Guido van Rossum in the twentieth century. Active . David Korn discovered the KornShell quite by accident. Passive . This information is used by the policy enforcement team. Active . Click the Submit button. ( Click is an imperative verb.) Passive . The orbit was calculated by Katherine Johnson. Distinguish active voice from passive voice in more complex sentences Many sentences contain multiple verbs, some of which are active and some of which are passive. For example, the following sentence contains two verbs, both of which are in passive voice: Here is that same sentence, partially converted to active voice: And here is that same sentence, now fully converted to active voice: Exercise Each of the following sentences contains two verbs. Categorize each of the verbs in the following sentences as either active or passive. For example, if the first verb is active and the second is passive, write Active, Passive . The QA team loves ice cream, but their managers prefer sorbet. Performance metrics are required by the team, though I prefer wild guesses. When software engineers attempt something new and innovative, a reward should be given. Click the icon to see the answer. Active, Active. The QA team loves ice cream, but their managers prefer sorbet. Passive, Active. Performance metrics are required by the team, though I prefer wild guesses. Active, Passive. When software engineers attempt something new and innovative, a reward should be given. Prefer active voice to passive voice Use the active voice most of the time. Use the passive voice sparingly. Active voice provides the following advantages: Most readers mentally convert passive voice to active voice. Why subject your readers to extra processing time? By sticking to active voice, readers can skip the preprocessor stage and go straight to compilation. Passive voice obfuscates your ideas, turning sentences on their head. Passive voice reports action indirectly. Some passive voice sentences omit an actor altogether, which forces the reader to guess the actor's identity. Active voice is generally shorter than passive voice. Be bold---be active. Scientific research reports (optional material) The writing in research reports tends to be understated. Here, for example, is one of the most famous passages in twentieth century science writing, from Crick and Watson's 1953 paper in Nature entitled, Molecular Structure of Nucleic Acids: A Structure for Deoxyribose Nucleic Acid : It has not escaped our notice that the specific pairing we have postulated immediately suggests a possible copying mechanism for the genetic material. The authors are so excited about their discovery that they're whispering it from the rooftops. Passive voice thrives in a tentative landscape. In research reports, experimenters and their equipment often disappear, leading to passive sentences that start off as follows: It has been suggested that... Data was taken... Statistics were calculated... Results were evaluated. Do we know who is doing what to whom? No. Does the passive voice somehow make the information more objective? No. Many scientific journals have embraced active voice. We encourage the remainder to join the quest for clarity. Exercise Rewrite the following passive voice sentences as active voice. Only part of certain sentences are in passive voice; ensure that all parts end up as active voice: The flags were not parsed by the Mungifier. A wrapper is generated by the Op registration process. Only one experiment per layer is selected by the Frombus system. Quality metrics are identified by asterisks; ampersands identify bad metrics. Click the icon to see the answer. The Mungifier did not parse the flags. The Op registration process generates a wrapper. The Frombus system selects only one experiment per layer. Asterisks identify quality metrics; ampersands identify bad metrics.","tags":"Writing","url":"active-voice-vs-passive-voice.html","loc":"active-voice-vs-passive-voice.html"},{"title":"Audience","text":"Copied from, https://developers.google.com/tech-writing. Audience Estimated Time: 10 minutes The course designers believe that you are probably comfortable with mathematics. Therefore, this unit begins with an equation: good documentation = knowledge and skills your audience needs to do a task - your audience's current knowledge and skills In other words, make sure your document provides the information your audience needs that your audience doesn't already have. Therefore, this unit explains how to do the following: Define your audience. Determine what your audience needs to learn. Fit documentation to your audience. As the following video suggests, targeting the wrong audience can be messy: Define your audience Serious documentation efforts spend considerable time and energy on defining their audience. These efforts might involve surveys, user experience studies, focus groups, and documentation testing. You probably don't have that much time, so this unit takes a simpler approach. Begin by identifying your audience's role (s). Sample roles include: software engineers technical, non-engineer roles (such as technical program managers) scientists professionals in scientific fields (for example, physicians) undergraduate engineering students graduate engineering students non-technical positions We happily appreciate that many people in non-technical roles have great technical and mathematical skills. However, roles remain an essential first-order approximation in defining your audience. People within the same role generally share certain base skills and knowledge. For example: Most software engineers know popular sorting algorithms, big O notation , and at least one programming language. Therefore, you can depend on software engineers knowing what O(n) means, but you can't depend on non-technical roles knowing O(n). A research report targeted at physicians should look very different from a newspaper article about the same research aimed at a lay audience. A professor's explanation of a new machine learning approach to graduate students should differ from the explanation to first-year undergraduate students. Writing would be so much easier if everyone in the same role shared exactly the same knowledge. Unfortunately, knowledge within the same role quickly diverges. Amal is an expert in Python, Sharon's expertise is C++, and Micah's is in Java. Kara loves Linux, but David only knows iOS. Roles, by themselves, are insufficient for defining an audience. That is, you must also consider your audience's proximity to the knowledge. The software engineers in Project Frombus know something about related Project Dingus but nothing about unrelated Project Carambola. The average heart specialist knows more about ear problems than the average software engineer but far less than an audiologist. Time also affects proximity. Almost all software engineers, for example, studied calculus. However, most software engineers don't use calculus in their jobs, so their knowledge of calculus gradually fades. Conversely, experienced engineers typically know vastly more about their current project than new engineers on the same project. Sample audience analysis The following is a sample audience analysis for fictitious Project Zylmon: The target audience for Project Zylmon falls into the following roles: software engineers technical product managers The target audience has the following proximity to the knowledge: My target audience already knows the Zyljeune APIs, which are somewhat similar to the Zylmon APIs. My target audience knows C++, but has not typically built C++ programs in the new Winged Victory development environment. My target audience took linear algebra in university, but many members of the team need a refresher on matrix multiplication. Determine what your audience needs to learn Write down a list of everything your target audience needs to learn to accomplish goals. In some cases, the list should hold tasks that the target audience needs to perform . For example: After reading the documentation, the audience will know how to do the following tasks: Use the Zylmon API to list hotels by price. Use the Zylmon API to list hotels by location. Use the Zylmon API to list hotels by user ratings. Note that your audience must sometimes master tasks in a certain order. For example, your audience might need to learn how to build and execute programs in a new development environment before learning how to write particular kinds of programs. If you are writing a design spec, then your list should focus on information your target audience should learn rather than on mastering specific tasks: For example: After reading the design spec, the audience will learn the following: Three reasons why Zylmon outperforms Zyljeune. Five reasons why Zylmon consumed 5.25 engineering years to develop. Fit documentation to your audience Writing to meet your audience's needs requires unselfish empathy. You must create explanations that satisfy your audience's curiosity rather than your own. How do you step out of yourself in order to fit documentation to the audience? Unfortunately, we can offer no easy answers. We can, however, offer a few parameters to focus on. Vocabulary and concepts Match your vocabulary to your audience. See Words for help. Be mindful of proximity. The people on your team probably understand your team's abbreviations, but do people on other teams understand those same abbreviations? As your target audience widens, assume that you must explain more. Similarly, experienced people on your software team probably understand the implementation details and data structures of your team's project, but nearly everyone else (including new members of your team) does not. Unless you are writing specifically for other experienced members of your team, you typically must explain more than you expect. Curse of knowledge Experts often suffer from the curse of knowledge , which means that their expert understanding of a topic ruins their explanations to newcomers. As experts, it is easy to forget that novices don't know what you already know. Novices might not understand explanations that make passing reference to subtle interactions and deep systems that the expert doesn't stop to explain. From the novice's point of view, the curse of knowledge is a \"File not found\" linker error due to a module not yet compiled. Exercise Assume that the following paragraph is the start of a paper aimed at physicians who have never programmed before. Identify the aspects of the paragraph that suffer from the curse of knowledge: C is a mid-level language, higher than assembly language but lower than Python and Java. The C language provides programmers fine-grained control over all aspects of a program. For example, using the C Standard Library, it is easy to allocate and free blocks of memory. In C, manipulating pointers directly is mundane. Suppose the preceding paragraph was aimed at undergraduate computer science students new to C but comfortable with Python. Does the paragraph still suffer from the curse of knowledge? Click the icon to see the answer. This paragraph suffers immensely from the curse of knowledge. The target audience has never programmed before, so the following terms are inappropriate or unfamiliar: language mid-level language assembly language Python Java program C Standard Library allocate and free blocks of memory pointers This paragraph also suffers from the curse of knowledge for the alternative audience. The average Python programmer is unaware of manipulating memory or pointers. A better introductory paragraph would compare and contrast C with Python. Simple words English has become the dominant language for technical communication worldwide. However, English is not the native language of a significant percentage of technical readers. Therefore, prefer simple words over complex words. Avoid using arcane, obsolete, or overly-complex English words; sesquipedalian and rare words repel most readers. Cultural neutrality and idioms Keep your writing culturally neutral. Do not require readers to understand the intricacies of NASCAR, cricket, or sumo in order to understand how a piece of software works. For example, the following sentence---packed with baseball metaphors as American as apple pie---might puzzle some Parisian readers: If Frambus 5.0 was a solid single, Frambus 6.0 is a stand-up double. Idioms are phrases whose overall meaning differs from the literal meaning of the individual words in that phrase. For example, the following phrases are idioms: a piece of cake Bob's your uncle Cake? Bob? Most American readers recognize the first idiom; most British readers recognize the second idiom. If you are writing strictly for a British audience, then Bob's your uncle can be fine. However, if you are writing for an international audience, then replace that idiom with this task is easy . Idioms are so deeply ingrained in our speech that the special nonliteral meaning of idioms becomes invisible to us. That is, idioms are another form of the curse of knowledge. Note that some people in your audience use translation software to read your documentation. Translation software tends to struggle more with cultural references and idioms than with plain, simple English. Exercise Identify the problems with the following sentences: As of Version 3.0, it was still kosher to call the Frambus method. Deciding which BorgResourceSpec constraints/preferences are combinable is a sticky wicket. Be that as it may, you still have to write unit tests. Click the icon to see the answer. In some places in the world, kosher has become slang for \"acceptable usage.\" Many readers, however, will wonder how religious dietary laws pertain to software. A sticky wicket is British slang, which does not travel well. Substituting the phrase challenging problem will fix this issue. Be that as it may is an idiom. Substituting the transition However will fix this problem..","tags":"Writing","url":"audience.html","loc":"audience.html"},{"title":"Clear sentences","text":"Copied from, https://developers.google.com/tech-writing. Clear sentences Estimated Time: 10 minutes Comedy writers seek the funniest results, horror writers strive for the scariest, and technical writers aim for the clearest. In technical writing, clarity takes precedence over all other rules. This unit suggests a few ways to make your sentences beautifully clear. Choose strong verbs Many technical writers believe that the verb is the most important part of a sentence. Pick the right verb and the rest of the sentence will take care of itself. Unfortunately, some writers reuse only a small set of mild verbs, which is like serving your guests stale crackers and soggy lettuce every day. Picking the right verb takes a little more time but produces more satisfying results. To engage and educate readers, choose precise, strong, specific verbs. Reduce imprecise, weak, or generic verbs, such as the following: forms of be : is, are, am, was, were, etc. occur happen For example, consider how strengthening the weak verb in the following sentences ignites a more engaging sentence: | Weak Verb | Strong Verb | | The error occurs when clicking the Submit button. | Clicking the Submit button triggers the error. | | This error message happens when... | The system generates this error message when... | | We are very careful to ensure... | We carefully ensure... | Many writers rely on forms of be as if they were the only spices on the rack. Sprinkle in different verbs and watch your prose become more appetizing. That said, a form of be is sometimes the best choice of verb, so don't feel that you have to eliminate every form of be from your writing. Note that generic verbs often signal other ailments, such as: an imprecise or missing actor in a sentence a passive voice sentence Exercise Clarify the following sentences by picking more specific verbs. Along the way, feel free to rearrange the sentences and to add, modify, or delete words: When a variable declaration doesn't have a datatype, a compiler error happens. Compiler errors occur when you leave off a semicolon at the end of a statement. Click the icon to see the answer. A few possible answers: When a variable declaration doesn't specify a datatype, the compiler generates an error message. If you declare a variable but don't specify a datatype, the compiler generates an error message. A few possible answers: Compilers issue errors when you omit a semicolon at the end of a statement. A missing semicolon at the end of a statement triggers compiler errors. Reduce there is/there are Sentences that start with There is or There are marry a generic noun to a generic verb. Generic weddings bore readers. Show true love for your readers by providing a real subject and a real verb. In the best case scenario, you may simply delete There is or There are (and possibly another word or two later in the sentence). For example, consider the following sentence: There is a variable called met_trick that stores the current accuracy. Removing There is replaces the generic subject with a better subject. For example, either of the following sentences is clearer than the original: A variable named met_trick stores the current accuracy. The met_trick variable stores the current accuracy. You can sometimes repair a There is or There are sentence by moving the true subject and true verb from the end of the sentence to the beginning. For example, notice that the pronoun you appears towards the end of the following sentence: There are two disturbing facts about Perl you should know. Replacing There are with You strengthens the sentence: You should know two disturbing facts about Perl. In still other situations, writers start sentences with There is or There are to avoid the hassle of creating true subjects or verbs. If no subject exists, consider creating one. For example, the following There is sentence does not identify the receiving entity: There is no guarantee that the updates will be received in sequential order. Replacing \"There is\" with a meaningful subject (such as clients ) creates a clearer experience for the reader: Clients might not receive the updates in sequential order. Exercise Clarify the following sentences by removing There is , and possibly rearranging, adding, modifying, or deleting other words: There is a lot of overlap between X and Y. There is no creator stack for the main thread. There is a low-level, TensorFlow, Python interface to load a saved model. There is a sharding function named distribute that assigns keys. Click the icon to see a possible answer. X and Y overlap a lot. The main thread does not provide a creator stack. TensorFlow provides a low-level Python interface to load a saved model. The distribute sharding function assigns keys. Minimize certain adjectives and adverbs (optional) Adjectives and adverbs perform amazingly well in fiction and poetry. Thanks to adjectives, plain old grass becomes prodigal and verdant , while lifeless hair transforms into something silky and flowing . Adverbs push horses to run madly and freely and dogs to bark loudly and ferociously . Unfortunately, adjectives and adverbs sometimes make technical readers bark loudly and ferociously. That's because adjectives and adverbs tend to be too loosely defined and subjective for technical readers. Worse, adjectives and adverbs can make technical documentation sound dangerously like marketing material. For example, consider the following passage from a technical document: Setting this flag makes the application run screamingly fast. Granted, screamingly fast gets readers attention but not necessarily in a good way. Feed your technical readers factual data instead of marketing speak. Refactor amorphous adverbs and adjectives into objective numerical information. For example: Setting this flag makes the application run 225-250% faster. Does the preceding change strip the sentence of some of its charm? Yes, a little, but the revamped sentence gains accuracy and believability. Note: Don't confuse educating your readers (technical writing) with publicizing or selling a product (marketing writing). When your readers expect education, provide education; don't intersperse publicity or sales material inside educational material.","tags":"Writing","url":"clear-sentences.html","loc":"clear-sentences.html"},{"title":"Creating sample code","text":"Copied from, https://developers.google.com/tech-writing. Creating sample code Estimated Time: 10 minutes Good sample code is often the best documentation. Even if your paragraphs and lists are as clear as blue water, programmers still prefer good sample code. After all, text is a different language than code, and it is code that the reader ultimately cares about. Trying to describe code with text is like trying to explain an Italian poem in English. Good samples are correct and concise code that your readers can quickly understand and easily reuse with minimal side effects . Correct Sample code should meet the following criteria: Build without errors. Perform the task it claims to perform. Be as production-ready as possible. For example, the code shouldn't contain any security vulnerabilities. Follow language-specific conventions. Sample code is an opportunity to directly influence how your users write code. Therefore, sample code should set the best way to use your product. If there is more than one way to code the task, code it in the manner that your team has decided is best. If your team hasn't considered the pros and cons of each approach, take time to do so. Always test your sample code. Over time, systems change and your sample code may break. Be prepared to test and maintain sample code as you would any other code. Many teams reuse their unit tests as sample programs, which is sometimes a bad idea. The primary goal of a unit test is to test; the only goal of a sample program is to educate. A snippet is a piece of a sample program, possibly only one or a few lines long. Snippet-heavy documentation often degrades over time because teams tend not to test snippets as rigorously as full sample programs. Running sample code Good documents explain how to run sample code. For example, your document might need to tell users to perform activities such as the following prior to running the samples: Install a certain library. Adjust the values assigned to certain environment variables. Adjust something in the integrated development environment (IDE). Users don't always perform the preceding activities properly. In some situations, users prefer to run or (experiment with) sample code directly in the documentation. (\"Click here to run this code.\") Writers should consider describing the expected output or result of sample code, especially for sample code that is difficult to run. Concise Sample code should be short, including only essential components. When a novice C programmer wants to learn how to call the malloc function, give that programmer a brief snippet, not the entire Linux source tree. Irrelevant code can distract and confuse your audience. That said, never use bad practices to shorten your code; always prefer correctness over conciseness. Understandable Follow these recommendations to create clear sample code: Pick descriptive class, method, and variable names. Avoid confusing your readers with hard-to-decipher programming tricks. Avoid deeply nested code. Optional: Use bold or colored font to draw the reader's attention to a specific section of your sample code. However, use highlighting judiciously---too much highlighting means the reader won't focus on anything in particular. Exercise Which of the following would be a more helpful line of code in a sample program? Assume that the target audience consists of software engineers new to the go.so API. MyLevel = go.so.Level(5, 28, 48) MyLevel = go.so.Level(rank=5, 28, 48) MyLevel = go.so.Level(rank=5, dimension=28, opacity=48) Click the icon to see the answer. Answer 3 is the best choice here. Although it is tempting to keep sample code as short as possible, omitting parameter names makes it harder for novices to learn. Commented Consider the following recommendations about comments in sample code: Keep comments short, but always prefer clarity over brevity. Avoid writing comments about obvious code, but remember that what is obvious to you (the expert) might not be obvious to newcomers. Focus your commenting energy on anything non-intuitive in the code. When your readers are very experienced with a technology, don't explain what the code is doing, explain why the code is doing it. Should you place descriptions of code inside code comments or in text (paragraphs or lists) outside of the sample code? Note that readers who copy-and-paste a snippet gather not only the code but also any embedded comments. So, put any descriptions that belong in the pasted code into the code comments. By contrast, when you must explain a lengthy or tricky concept, you should typically place the text before the sample program. Note: If you must sacrifice production readiness in order to make the code shorter and easier to understand, explain your decisions in the comments. Exercise What problems do you see in the comments within the following snippet? Assume that the code is aimed at programmers who are new to the br API but who have some experience with the concept of streams: /* Create a stream from the text file at pathname /tmp/myfile. */\\ mystream = br.openstream(pathname=\"/tmp/myfile\", mode=\"z\") Click the icon to see the answer. The comments contain the following flaws: The comment elaborates on a fairly obvious part of the code. The snippet doesn't explain the non-obvious portion of the code. Namely, what is the mode parameter and what does a value of z mean? Reusable For your reader to easily reuse your sample code, provide the following: All information necessary to run the sample code, including any dependencies and setup. Code that can be extended or customized in useful ways. Having easy-to-understand sample code that's concise and compiles is a great start. If it blows up your reader's app, though, they won't be happy. Therefore, when writing sample code, consider any potential side effects caused by your code being integrated into another program. Nobody wants insecure or grossly inefficient code. The example and the anti-example In addition to showing readers what to do , it is sometimes wise to show readers what not to do . For example, many programming languages permit programmers to place white space on either side of the equals sign. Now suppose that you were writing a tutorial on a language (such as bash) that does not permit white space on either side of the equals sign. In this case, showing both a good example and an anti-example will benefit the reader. For example: # A valid string assignment . s = \"The rain in Maine.\" # An invalid string assignment because of the white space on either side of the # equals sign . s = \"The rain in Maine.\" Sequenced A good sample code set demonstrates a range of complexity . Readers completely unfamiliar with a certain technology typically crave simple examples to get started. The first and most basic example in a sample code set is usually termed a Hello World program . After mastering the basics, engineers want more complex programs. A good set of sample code provides a healthy range of simple, moderate, and complex sample programs. Exercise Which of the following would be a good set of sample functions to support a tutorial introducing newcomers to the concept of functions? The following set of functions: A function that takes no parameters and doesn't return anything. A function that takes one parameter but doesn't return anything. A function that takes one parameter and returns one value. A function that takes three parameters and returns one value. The following set of functions: A function that takes three parameters and returns one value. The following set of functions: A function that takes one parameter and returns one value. A function that takes three parameters and returns one value. Click the icon to see the answer. The best answer is 1 . Providing samples that cover a range of complexity is usually the wisest choice---particularly for newcomers. Resist the temptation to rush towards very complex sample programs, bypassing the beginner and intermediate sample programs that newcomers crave. What's next? Congratulations: you've completed the pre-class work for Technical Writing Two. If the in-class portion of Technical Writing Two is available in your organization, please take it. If you'd like to facilitate the in-class portion of Technical Writing Two, see the facilitator's guide . A quick compilation of the topics covered in Technical Writing Two is available on the Summary page.","tags":"Writing","url":"creating-sample-code.html","loc":"creating-sample-code.html"},{"title":"Documents","text":"Copied from, https://developers.google.com/tech-writing. Documents Estimated Time: 10 minutes You can write sentences. You can write paragraphs. However, can you organize all those paragraphs into a coherent document? State your document's scope A good document begins by defining its scope. For example: This document describes the overall design of Project Frambus. A better document additionally defines its non-scope, that is, the topics not covered that the target audience might expect your document to cover. For example: This document does not describe the design for the related technology, Project Froobus. These scope and non-scope statements benefit not only the reader but also the writer (you). While writing, if the contents of your document veer away from the scope statement, then you must either refocus your document or modify your scope statement. When reviewing your first draft, delete (or branch off to another document) any sections that don't help satisfy the scope statement. State your audience A good document explicitly specifies its audience. For example: I wrote this document for the test engineers supporting Project Frambus. Beyond the audience's role, a good audience declaration might also specify any prerequisite knowledge or experience. For example: This document assumes that you understand matrix multiplication and how to brew a really good cup of tea. In some cases, the audience declaration must also specify prerequisite documents. For example: You must read \"Project Froobus: A New Hope\" prior to reading this document. Establish your key points up front Engineers and scientists are busy people who won't necessarily read all 76 pages of your design document. Imagine that your peers might only read the first paragraph of page one. When reviewing your documentation, ensure that the start of your document answers your readers' essential questions. Professional writers focus considerable energy on page one to increase the odds of readers making it to page two. However, page one of any long document is the hardest page to write. Therefore, be prepared to revise page one many times. Always write an executive summary (a TL;DR) for long engineering documents. Although the executive summary must be very short, expect to spend a lot of time writing it. A boring or confusing executive summary is a red flag warning potential readers to stay away. Write for your audience This course repeatedly emphasizes the importance of defining your audience. In this section, we focus on audience definition as a means of organizing your document. Define audience Answering the following questions helps you determine what your document should contain: Who is your target audience? What do your readers already know before they've read the document? What should your readers know or be able to do after they've read your document? For example, suppose you have invented a new sorting algorithm. The following list contains some potential answers to the preceding questions: My target audience consists of all the software engineers in my organization. Most of my target audience studied sorting algorithms during school. However, about 25% of my target audience hasn't implemented or evaluated a sorting algorithm in many years. After reading this document: Readers know how the algorithm works. Readers can implement the algorithm in their desired language. Readers know the circumstances in which the algorithm outperforms the popular quicksort algorithm. Readers understand performance degradation in certain edge cases. Organize After defining the audience, organize the document to supply what readers should know or be able to do after reading the document. For example, the outline for the document could look as follows: Overview of the algorithm Big O Implementation in pseudocode Sample implementation in C Tips in implementing in other languages Deeper analysis of algorithm Optimal datasets Edge case problems Furthermore, use the audience definition to help you choose the right approach to writing your document. For example, the target audience studied sorting algorithms but about a quarter of your audience might not remember the details of different algorithms. Therefore, your document should probably insert links to existing tutorials on quicksort rather than trying to explain quicksort. Break your topic into sections You modularize code into files, classes, and methods. Modular code is easier to read, understand, maintain, and reuse. Making your doc modular gives you the same benefits. You probably have strong intuition about functional modularity in code, but how do you apply those principles to your writing? Imagine that you have an empty jar, which you need to pack with a collection of large rocks, coarse gravel, and sand. How would you pack the jar to ensure that you can get all of your material in the jar? Of course you'd place the large rocks first, then pour in the gravel, and fill in the remaining air space with the sand. If you tried to do this in the opposite order, you would fail. Your reader's head is much like an empty jar, and your information generally comes in three sizes: rocks, gravel, and sand. Sections are the rocks. You need to structure the space inside your reader's jar-head with the rocks to accept the rest of the information. But how do you decide what is a big rock versus what is gravel? One strategy is to record yourself talking, or free-write, about your topic for a short amount of time---maybe just 2 to 5 minutes. Yes, this takes discipline. Examine what you produced. Did you do the following? Describe concepts in vague, under-specified ways? List the steps that your audience needs to complete to reach a goal? Describe the permutations of properties that a system can express? The under-specified things that you referred to are probably the large concepts that structure your topic. If your talk didn't do this, go back and try this structure. Exercise The following passage is the introductory paragraph for a document. List the titles of the sections that you would break this topic into. AlienWarez is a large-scale machine learning system. AlienWarez is best at building models for high-dimensional, sparse feature spaces. AlienWarez automatically explores and learns feature crosses that explain your data. AlienWarez refers specifically to the model training system. You train a model by extracting features from your source (log) data, and writing a data source for the training system. The Seti infrastructure team also provides a complete serving system. You are responsible for starting your own serving cluster, and moving your model to serving. The Seti serving system can serve AlienWarez, Seti, and Sibyl models. This guide explains how to train a AlienWarez model, and how to serve the model in production. Click the icon to see the answer. Here is a possible outline: Training a model Developing features Creating a data source ... Serving a model Starting a serving cluster Moving your model into serving Retrieving a prediction from serving ...","tags":"Writing","url":"documents.html","loc":"documents.html"},{"title":"Illustrating","text":"Copied from, https://developers.google.com/tech-writing. Illustrating Estimated Time: 10 minutes Remember when your teacher assigned you a hefty chapter to read? You flipped through the assigned section of the textbook, desperately hoping for...yes, pictures! Viewing illustrations was so much more fun than reading text. In fact, when it comes to reading technical material, the vast majority of adults are still little kids---still yearning for pictures rather than text. Figure 1. Good graphics engage readers in ways that text cannot. Nirmal Dulal [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)] According to research by Sung and Mayer (2012) , providing any graphics---good or bad---makes readers like the document more; however, only instructive graphics help readers learn. This unit suggests a few ways to help you create figures truly worth a thousand words. Write the caption first Often times, it is helpful to write the caption before creating the illustration. Then, create the illustration that best represents the caption. This process helps you to check that the illustration matches the goal. Good captions have the following characteristics: They are brief . Typically, a caption is just a few words. They explain the takeaway . After viewing this graphic, what should the reader remember? They focus the reader's attention. Focus is particularly important when a photograph or diagram contains a lot of detail. Exercise Target Audience: CS undergraduate students taking an \"Introduction to Data Structures\" class. Consider the following three figures, each of which uses the same caption. Caption A. A single-linked list holds content and a pointer to the next node. Caption B. A single-linked list holds content and a pointer to the next node. Caption C. A single-linked list holds content and a pointer to the next node. Which of the three preceding figures best illustrates its caption? Click the icon to see the answer. Figure A is bad. The chain is pretty, but information-free. The chain also erroneously implies that a single-linked list points both backwards and forwards. Figure B is okay. The illustration helps students realize that the first item points to the second item, the second points to the third, and so on. However, although the caption refers to both content and a pointer , the illustration shows pointers but does not show content. Figure C is the best and most instructive choice. The illustration clearly delineates the content part of each node from the pointer part. Constrain the amount of information in a single drawing Few intellectual tasks can be quite as rewarding as studying a fine painting, gradually uncovering layers of insight and meaning. People pay good money to do exactly that in the world's art museums. Figure 2. You'd happily study this Van Gogh painting. Portrait of Pere Tanguy By Vincent van Gogh - Musée Rodin [Public domain] By contrast, highly complex technical illustrations like the following tend to discourage most readers: Figure 3. Complex block diagrams overwhelm readers. Just as you avoid overly-long sentences, strive to avoid visual run-ons. As a rule of thumb, don't put more than one paragraph's worth of information in a single diagram. (An alternative rule of thumb is to avoid illustrations that require more than five bulleted items to explain.) I can hear you saying, \"But real-life technical systems can be vastly more complex than the one shown in Figure 3.\" You are correct, but you probably don't feel compelled to explain real-life complex systems in a single paragraph. The trick to whittling visual clutter into something coherent and helpful is to organize complex systems into subsystems, like those shown in the following figure: Figure 4. A complex system organized into three subsystems. After showing the \"big picture,\" provide separate illustrations of each subsystem. Figure 5. Expanded detail for one subsystem of a complex system. Alternatively, start with a simple \"big picture\" and then gradually expand detail in each subsequent illustration. Focus the reader's attention When confronted with a complex screenshot like the following, readers struggle to determine what's relevant: Figure 6. Readers don't know what to focus on. Adding a visual cue, for example, the red ellipse in the following figure, helps readers focus on the relevant section of the screenshot: Figure 7. Readers focus on a shape that breaks the pattern. Callouts provide another way to focus the reader's attention. For pictures and line art, a callout helps our eyes find just the right spot to land on. Callouts in pictures are often better than paragraph long explanations of the pictures because callouts focus the reader's attention on the most important aspects of the picture. Then, in your explanation, you can focus directly on the relevant part of the diagram, rather than spending time describing what part of the image you are talking about. In the example image, the callout and arrow quickly direct the reader to the purpose. Figure 8. A callout directs readers' eyes. NASA / JPL-Caltech / University of Arizona [Public domain] Illustrating is re-illustrating As with writing, the first draft of an illustration is seldom good enough. Revise your illustrations to clarify the content. As you revise, ask yourself the following questions: How can I simplify the illustration? Should I split this illustration into two or more simpler illustrations? Is the text in the illustration easy to read? Does text contrast sufficiently with its background? What's the takeaway? For instance, consider the evolution of the London Tube map . Prior to 1931, the Tube map was drawn to scale, complete with above ground roads and tube lines that curved as the tracks did. Figure 9. 1908 to scale map of the London Tube with above ground roads. [Public domain] In 1931, Harry Beck revolutionized a new type of public transit map that simplified the older map by removing above ground markers and removing scale. His design instead focused on what people using the maps really cared about: getting from station A to station B. Even with the success of his 1931 map, Beck still iterated on the diagram for many years to simplify and clarify the map. Consider now the modern tube map , although new lines and stations have appeared, they still remain close to Beck's design. Exercise Consider the following original illustration: Figure 10. A complex diagram. The takeaway of the preceding diagram is supposed to be: For a recursive solution, call the function itself in the return statement until you reach a base case solution. In what ways does the complexity of the diagram hide the takeaway? How might you address these problems? Click the icon to see the answer. Some possible issues with the diagram include: Issue : The bright colors pull the reader's attention away from other parts of the diagram.\\ Solution : Choose colors carefully so that they do not overpower the diagram. Issue : The diagram does not have sufficient color contrast. This makes the diagram inaccessible for some people with low-vision or certain types of color blindness.\\ Solution : Remove unnecessary use of color and ensure that colors pass standard color contrast recommendations . Issue : The arrows currently point in both directions which makes it unclear which way the diagram flows.\\ Solution : Separate the arrows into two parts with one set illustrating invoking a function and the other set illustrating returning from the function. There are also additional issues in the diagram that are not identified here. Here is an improved illustration: Figure 11. A simplified version of the preceding diagram. What flaws do you see in the improved illustration? Click the icon to see the answer. Here are two of the flaws that still exist: This diagram is still too complex. It would take far more than a paragraph to explain this illustration. Consider how removing extra information or adding clarifying labels might simplify the interpretation. While separating the arrows helped display when the functions invoke or return data to each other, the return arrows might benefit from labels that tell the reader what the return values are. Illustration tools There are many options available for creating diagrams. Three options that are free or have free options include: Google Drawings Draw.IO LucidChart When exporting diagrams from these tools to use in documentation, it is usually best to export the files as SVG or Scalable Vector Graphics . Scalable Vector Graphics easily scale diagrams based on space constraints so that no matter the size, you end up with a high quality image.","tags":"Writing","url":"illustrating.html","loc":"illustrating.html"},{"title":"Just enough grammar","text":"Copied from, https://developers.google.com/tech-writing. Just enough grammar (optional) Estimated Time: 10 minutes This unit provides just enough grammar to understand the remainder of the course. If you already know some grammar, move on to Words . Otherwise, read on. For simplicity's sake, this unit takes a few shortcuts; grammatical topics are actually wildly more complicated than this unit suggests. Grammarians don't all agree on the number or types of parts of speech. The following table focuses on the parts of speech relevant to this course: | Part of Speech | Definition | Example | | Noun | a person, place, concept, or thing | Sam runs races. | | Pronoun | a noun that substitutes for another noun | Sam runs races. He likes to compete. | | Adjective | a word or phrase that modifies a noun | Sam wears blue shoes. | | Verb | an action word or phrase | Sam runs races. | | Adverb | a word or phrase that modifies a verb, an adjective, or another adverb | Sam runs slowly. | | Preposition | a word or phrase specifying the positional relationship of two nouns | Sam's sneakers are seldom on his shelf. | | Conjunction | a word that connects two nouns or phrases | Sam's trophies and ribbons live only in his imagination. | | Transition | a word or phrase that connects two sentences | Sam runs races weekly. However, he finishes races weakly. | Nouns Nouns represent people, places, or things. Judy , Antarctica , and hammers are all nouns, but so are intangible concepts like robustness and perfection . For example, we've highlighted the nouns in the following passage: In the framework , an object must copy any underlying values that the object wants to change. The protos in the codebase are huge, so copying the protos is unacceptably expensive. In programming, you might think of classes and variables as your program's nouns. Exercise Identify the six nouns in the following passage: C enables programmers to control pointers and memory. Great power brings great responsibility. Click the icon to see the answer. You can find the nouns in boldface: C enables programmers to control pointers and memory . Great power brings great responsibility . Now suppose the second sentence was the following: Great control brings great responsibility. Is \"control\" a verb or is it a noun? In this context, \"control\" is a noun, even though \"to control\" in the first sentence is a verb. Many words in English serve as a noun in some contexts and a verb in others. Pronouns Pronouns are an indirection layer---pointers to or substitutions for other nouns or sentences. For example, consider the following two sentences: Janet writes great code. She is a senior staff engineer. In the preceding example, the first sentence establishes Janet as a noun. The second sentence substitutes the pronoun She for the noun Janet . In the following example, the pronoun This substitutes for the entire sentence that preceded it: Most applications aren't sufficiently tested. This is poor engineering. Exercise Identify the three pronouns in the following passage: The cafeteria featured peashew butter and pluot jam on pumperye toast. Employees found it awesome and wished they could eat this every day. Click the icon to see the answer. The cafeteria featured peashew butter and pluot jam on pumperye toast. Employees found it awesome and wished they could eat this every day. Verbs A verb is an action word or phrase. When you want to represent the relationship between two nouns (an actor and a target), the verb does the work. A verb identifies what the actor does to the target. Each sentence must contain at least one verb. For example, each of the following sentences contain a single verb: Sakai prefers pasta. Rick likes the ocean. Smurfs are blue. Jess suffers from allergies. Some sentences, such as the following, contain multiple verbs: Nala suffers from allergies and sneezes constantly. Chung likes snacks to eat while riding the train. Depending on the tense and the conjugation, a verb could consist of one word or multiple words. For example: Tina was eating breakfast a few hours ago. Tina is eating lunch right now. Tina will eat dinner tonight at 7:00. Exercise Identify the verbs in the following passage: Samantha is coding Operation Bullwinkle in C++. This project currently consumes over 80,000 lines of code. She previously used Python, but recently gravitated to C++. Samantha leads a team of four software engineers, which will grow to six software engineers next quarter. Click the icon to see the answer. Samantha is coding Operation Bullwinkle in C++. This project currently consumes over 80,000 lines of code. She previously used Python, but recently gravitated to C++. Samantha leads a team of four software engineers, which will grow to six software engineers next quarter. Adjectives and adverbs Adjectives modify nouns. For example, in the following passage, notice how the adjectives modify the subsequent noun: Tom likes red balloons. He prepares delicious food. He fixed eight bugs at work. Most adverbs modify verbs. For example, notice how the adverb ( efficiently ) in the following sentence modifies the verb ( fixes ): Jane efficiently fixes bugs. Adverbs are not necessarily right next to their verb. For example, in the following sentence, the adverb ( efficiently ) is two words away from the verb ( fixes ): Jane fixes bugs efficiently . Adverbs can also modify adjectives or other adverbs. Exercise Identify the four adjectives in the following passage: Engineering is a great career for brilliant minds. I know five engineers who could excel at any intellectual task. Click the icon to see the answer. Engineering is a great career for brilliant minds. I know five engineers who could excel at any intellectual task. Conjunctions and transitions Conjunctions connect phrases or nouns within a sentence; transitions connect sentences themselves. The most important conjunctions are as follows: and but or For example, in the following sentence, and connects \"code\" with \"documentation,\" while but connects the first half of the sentence with the second. Natasha writes great internal code and documentation but seldom works on open-source projects. The most important transitions in technical writing are as follows: however therefore for example For example, in the following passage, notice how the transitions connect and contextualize the sentences: Juan is a wonderful coder. However , he rarely writes sufficient tests. For example , Juan coded a 5,000 line FFT package that contained only a single 10-line unit test. Exercise Fill in the most appropriate transition: Barbara typically studies problems for a long time before writing the first line of code. _ ______, she spontaneously coded a method the other day when she was suddenly inspired. Click the icon to see the answer. The best transition for this situation is as follows: However","tags":"Writing","url":"just-enough-grammar.html","loc":"just-enough-grammar.html"},{"title":"Lists and tables","text":"Copied from, https://developers.google.com/tech-writing. Lists and tables Estimated Time: 15 minutes Good lists can transform technical chaos into something orderly. Technical readers generally love lists. Therefore, when writing, seek opportunities to convert prose into lists. Choose the correct type of list The following types of lists dominate technical writing: bulleted lists numbered lists embedded lists Use a bulleted list for unordered items; use a numbered list for ordered items. In other words: If you rearrange the items in a bulleted list, the list's meaning does not change. If you rearrange the items in a numbered list, the list's meaning changes . For example, we've made the following a bulleted list because rearranging its items does not change the list's meaning: Bash provides the following string manipulation mechanisms: deleting a substring from the start of a string reading an entire file into one string variable The following list, by contrast, must be a numbered list because rearranging its items would change the list's meaning: Take the following steps to reconfigure the server: Stop the server. Edit the configuration file. Restart the server. An embedded list (sometimes called a run-in list) contains items stuffed within a sentence. For example, the following sentence contains an embedded list with four items. The llamacatcher API enables callers to create and query llamas, analyze alpacas, delete vicugnas, and track dromedaries. Generally speaking, embedded lists are a poor way to present technical information. Try to transform embedded lists into either bulleted lists or numbered lists. For example, you should convert the sentence containing the embedded list into the following passage: The llamacatcher API enables callers to do the following: Create and query llamas. Analyze alpacas. Delete vicugnas. Track dromedaries. Exercise Convert the following paragraph into one or more lists: Today at work, I have to code three unit tests, write a design document, and review Janet's latest document. After work, I have to wash my car without using any water and then dry it without using any towels. Don't forget to introduce your list(s). Click the icon to see the answer. Here's one possible answer: I must do the following at work today: Code three unit tests. Write a design document. Review Janet's latest document. After work, I must do the following: Wash my car without using any water. Dry my car without using any towels. The following is an alternative answer: I must do the following tasks today: At work: Code three unit tests. Write a design document. Review Janet's latest document. After work: Wash my car without using any water. Dry my car without using any towels. Keep list items parallel What separates effective lists from defective lists? Effective lists are parallel; defective lists tend to be nonparallel. All items in a parallel list look like they \"belong\" together. That is, all items in a parallel list match along the following parameters: grammar logical category capitalization punctuation Conversely, at least one item in a nonparallel list fails at least one of the preceding consistency checks. For example, the following list is parallel because all the items are plural nouns (grammar), edible (logical category), lower case (capitalization), and without periods or commas (punctuation). carrots potatoes cabbages By contrast, the following list is painfully nonparallel along all four parameters: carrots potatoes The summer light obscures all memories of winter. The following list is parallel because all the items are complete sentences with complete sentence capitalization and punctuation: Carrots contain lots of Vitamin A. Potatoes taste delicious. Cabbages provide oodles of Vitamin K. The first item in a list establishes a pattern that readers expect to see repeated in subsequent items. Exercise Is the following list parallel or nonparallel? Broccoli inspires feelings of love or hate. Potatoes taste delicious. Cabbages. Click the icon to see the answer. The list is nonparallel. The first two items are complete sentences, but the third item is not a sentence. (Don't be fooled by the capitalization and punctuation of the third item.) Exercise Is the following list parallel or nonparallel? The red dots represent sick trees. Immature trees are represented by the blue dots. The green dots represent healthy trees. Click the icon to see the answer. This is a nonparallel list. The first and third items are in active voice, but the second item is in passive voice. Start numbered list items with imperative verbs Consider starting all items in a numbered list with an imperative verb. An imperative verb is a command, such as open or start . For example, notice how all of the items in the following parallel numbered list begin with an imperative verb: Download the Frambus app from Google Play or iTunes. Configure the Frambus app's settings. Start the Frambus app. The following numbered list is nonparallel because two of the sentences start with an imperative verb, but the third item does not: Instantiate the Froobus class. Invoke the Froobus.Salmonella() method. The process stalls. Exercise Make the following list parallel. Ensure that each element in the result list begins with an imperative verb: Stop Früvous The key configuration file is /moxy/fruvous . Open this file with an ASCII text editor. In this file, you will see a parameter named Carambola, which is currently set to the default value (32). Change this value to 64. When you are finished setting this parameter, save and close the configuration file now, start Früvous again. Click the icon to see the answer. The following is one possible answer: Stop Früvous. Open the key configuration file, /moxy/fruvous , with an ASCII text editor. Change the Carambola parameter from its default value (32) to 64. Save and close the configuration file. Restart Früvous. Punctuate items appropriately If the list item is a sentence, use sentence capitalization and punctuation. Otherwise, do not use sentence capitalization and punctuation. For example, the following list item is a sentence, so we capitalized the M in Most and put a period at the end of the sentence: Most carambolas have five ridges. However, the following list item is not a sentence, so we left the t in the in lowercase and omitted a period: the color of lemons Create useful tables Analytic minds tend to love tables. Given a page containing multiple paragraphs and a single table, engineers' eyes zoom towards the table. Consider the following guidelines when creating tables: Label each column with a meaningful header. Don't make readers guess what each column holds. Avoid putting too much text into a table cell. If a table cell holds more than two sentences, ask yourself whether that information belongs in some other format. Although different columns can hold different types of data, strive for parallelism within individual columns. For instance, the cells within a particular table column should not be a mixture of numerical data and famous circus elephants. Note: Some tables don't render well across all form factors. For example, a table that looks great on your laptop may look awful on your phone. Introduce each list and table We recommend introducing each list and table with a sentence that tells readers what the list or table represents. In other words, give the list or table context. Terminate the introductory sentence with a colon rather than a period. Although not a requirement, we recommend putting the word following into the introductory sentence. For example, consider the following introductory sentences: The following list identifies key performance parameters: Take the following steps to install the Frambus package: The following table summarizes our product's features against our key competitors' features: Exercise Write an introductory sentence for the following table: Languages Inventor Year Introduced Key Feature Lisp John McCarthy 1958 recursion C++ Bjarne Stroustrup 1979 OOP Python Guido van Rossum 1994 simplicity Click the icon to see the answer. Here are a couple of possible introductory sentences for the table: The following table contains a few key facts about some popular programming languages: The following table identifies the inventor, year of invention, and key feature of three popular programming languages:","tags":"Writing","url":"lists-and-tables.html","loc":"lists-and-tables.html"},{"title":"Organizing large documents","text":"Copied from, https://developers.google.com/tech-writing. Organizing large documents Estimated Time: 20 minutes How do you organize a large collection of information into a cohesive document or website? Alternatively, how do you reorganize an existing messy document or website into something approachable and useful? The following tactics can help: Organizing a document Adding navigation Disclosing information progressively When to write large documents You can organize a collection of information into longer standalone documents or a set of shorter interconnected documents. A set of shorter interconnected documents is often published as a website, wiki, or similar structured format. Some readers respond more positively than others to longer documents. Consider the following perspectives from two hypothetical readers you're writing documentation for: Hong finds reading long documents difficult and disorientating. He prefers to use site search to find answers to his questions. Rose is comfortable navigating large documents. She often uses the built-in page search feature in her web browser to find useful information on the current page. So, should you organize your material into a single document or into a set of documents in a website? Consider the following guidelines: How-to guides, introductory overviews, and conceptual guides often work better as shorter documents when aimed at readers who are new to the subject matter. For example, a reader who is completely new to your subject matter might struggle to remember lots of new terms, concepts, and facts. Remember that your audience might be reading your documentation to gain a quick and general overview of the topic. In-depth tutorials, best practice guides, and command-line reference pages can work well as lengthier documents, especially when aimed at readers who already have some experience with the tools and subject matter. A great tutorial can rely on a narrative to lead the reader through a series of related tasks in a longer document. However, even large tutorials can sometimes benefit from being broken up into smaller parts. Many longer documents aren't designed to be read in one sitting. For example, users typically scan through a reference page to search for an explanation of a command or flag. The remainder of this unit covers techniques that can be useful for writing longer documents, such as tutorials and some conceptual guides. Organize a document This section suggests some techniques for planning a longer document, including creating an outline and drafting an introduction. After you've completed the first draft of a document, you can review it against your outline and introduction to make sure you haven't missed anything you originally intended to cover. Outline a document Starting with a structured, high-level outline can help you group topics and determine where more detail is needed. The outline helps you move topics around before you get down to writing. You might find it useful to think of an outline as the narrative for your document. There is no standard approach to writing an outline, but the following guidelines provide practical tips you might find useful: Before you ask your reader to perform a task, explain to them why they are doing it. For example, the following bullet points illustrate a section of an outline from a tutorial about auditing and improving the accessibility of web pages: Introduce the browser plugin; explain that we'll use the results of the audit report to fix several bugs. List the steps to run the plugin and audit the accessibility of a web page. Limit each step of your outline to describing a concept or completing a specific task. Structure your outline so that your document introduces information when it's most relevant to your reader. For example, your reader probably doesn't need to know (or want to know) about the history of the project in the introductory sections of your document when they're just getting started with the basics. If you feel the history of the project is useful, then include a link to this type of information at the end of your document. Documents that alternate between conceptual information and practical steps can be a particularly engaging way to learn. Consider explaining a concept and then demonstrating how the reader can apply it in either a sample project or in their own work. Outlines are especially useful if you're working with a team of contributors who are going to review and test your document. Before you start drafting, share your outline with your contributors to check if they have any suggestions. Outline exercise For this exercise, review and update the following high-level outline of an introduction to a long tutorial. You can rearrange, add, and remove topics. ## The history of the project Describes the history of the development of the project . ## Prerequisites Lists concepts the reader should be familiar with prior to starting , as well as any software or hardware requirements . ## The design of the system Describes how the system works . ## Audience Describes who the tutorial is aimed at . ## Setting up the tutorial Explains how to configure your environment to follow the tutorial . ## Troubleshooting Explains how to diagnose and solve potential problems that might occur when working through the tutorial . ## Useful terminology Lists definitions of terms that the reader needs to know to follow the tutorial . Click the icon to see the answer. The following is one possible solution: ## Audience Describes who the tutorial is aimed at . ## Prerequisites Lists concepts the reader should be familiar with prior to starting , as well as any software or hardware requirements . ## Setting up the tutorial Explains how to configure your environment to follow the tutorial . ## Useful terminology Lists definitions of terms that the reader needs to know to follow the tutorial . Introduce a document If readers of your documentation can't find relevance in the subject, they are likely to ignore it. To set the ground rules for your users, we recommend providing an introduction that includes the following information: What the document covers. What prior knowledge you expect readers to have. What the document doesn't cover. Remember that you want to keep your documentation easy to maintain, so don't try to cover everything in the introduction. The following paragraph demonstrates the ideas from the preceding list as an overview for a hypothetical document publishing platform called Froobus: This document explains how to publish Markdown files using the Froobus system. Froobus is a publishing system that runs on a Linux server and converts Markdown files into HTML pages. This document is intended for people who are familiar with Markdown syntax. To learn about the syntax, see the Markdown reference. You also need to be comfortable running simple commands in a Linux terminal. This document doesn't include information about installing or configuring a Froobus publishing system. For information on installing Froobus, see Getting started. After you've completed the first draft, check your entire document against the expectations you set in your overview. Does your introduction provide an accurate overview of the topics you cover? You might find it useful to think of this review as a form of documentation quality assurance (QA). Introduction exercise For this exercise, review and revise the following introduction for a best practices guide for a hypothetical programming language called F@. Remove any information you feel is irrelevant in this context and add any information you feel is missing. This guide lists best practices for working with the F@ programming language. F@ was developed in 2011 as an open source community project. This guide supplements the F@ style guide. In addition to the best practices in this guide, make sure you also install and run the F@ command-line linter on your code. The programming language is widely adopted in the health industry. If you have suggestions for additions to the list of best practices, file an issue in the F@ documentation repository. Click the icon to see the answer. The following is one possible solution: This guide lists best practices for working with the F@ programming language. Before you review this guide, complete the introductory tutorial for new F@ developers. This guide supplements the F@ style guide. In addition to the best practices in this guide, make sure you also install and run the F@ command-line linter on your code. If you have suggestions for additions to the list of best practices, file an issue in the F@ documentation repository. Add navigation Providing navigation and signposting for your readers ensures they can find what they are looking for and the information they need to get unstuck. Clear navigation includes: introduction and summary sections a clear, logical development of the subject headings and subheadings that help users understand the subject overviews that introduce the tool a table of contents menu that shows users where they are in the document links to related resources or more in-depth information links to what to learn next The tips in the following sections can help you plan the headings in your documentation. Prefer task-based headings Choose a heading that describes the task your reader is working on. Avoid headings that rely on unfamiliar terminology or tools. For example, suppose you are documenting the process for creating a new website. To create the site, the reader must initialize the Froobus framework. To initialize the Froobus framework, the reader must run the carambola command-line tool. At first glance, it might seem logical to add either of the following headings to the instructions: Running the carambola command Initializing the Froobus framework Unless your readers are already very experienced with the terminology and concepts for this topic, a more familiar heading might be preferable, such as Creating the site . Provide text under each heading Most readers appreciate at least a brief introduction under each heading to provide some context. Avoid placing a level three heading immediately after a level two heading, as in the following example: ## Creating the site ### Running the carambola command In this example, a brief introduction can help orient the reader: ## Creating the site To create the site , you run the `carambola` command - line tool . The command displays a series of prompts to help you configure the site . ### Running the carambola command Heading exercise Helping readers navigate through your documentation helps them find the information they need to successfully use your tool. Often, a clear and well-organized table of contents or outline acts like a map that helps your users navigate the functionality of your tool. For this exercise, improve the following outline. You can rearrange, add, and delete topics and create secondary entries too. About this tutorial Advanced topics Build the asset navigation tree Define resource paths Defining and building projects Launch the development environment Defining and building resources What's next Define image resources Audience See also Build an image resource Define an image project Build an image project Setting up the tutorial Select the tutorial asset root About this guide Click the icon to see the answer. The following is one possible solution: ## About this tutorial ### Audience ### About this guide ### Advanced topics ## Setting up the tutorial ### Select the tutorial asset root ### Launch the development environment ### Build the asset navigation tree ### Define resource paths ## Defining and building resources ### Define image resources ### Build an image resource ## Defining and building projects ### Define an image project ### Build an image project ## Defining and building databases ### Define a database ### Build a database ## Pushing , publishing , and viewing a database ### Push a database ### Publish a database ### View a database ## Configuring display rules for point data ### Define , configure , and build vector data ## See also ### Sample data files ## What ' s next Disclose information progressively Learning new concepts, ideas, and techniques can be a rewarding experience for many readers who are comfortable reading through documentation at their own pace. However, being confronted with too many new concepts and instructions too quickly can be overwhelming. Readers are more likely to be receptive to longer documents that progressively disclose new information to them when they need it. The following techniques can help you incorporate progressive disclosure in your documents: Where possible, try introducing new terminology and concepts near to the instructions that rely on them. Break up large walls of text. To avoid multiple large paragraphs on a single page, aim to introduce tables, diagrams, lists, and headings where appropriate. Break up large series of steps. If you have a particularly long list of complicated steps, try to re-arrange them into shorter lists that explain how to complete sub-tasks. Start with simple examples and instructions, and add progressively more interesting and complicated techniques. For example, in a tutorial for creating forms, start by explaining how to handle text responses, and then introduce other techniques to handle multiple choice, images, and other response types.","tags":"Writing","url":"organizing-large-documents.html","loc":"organizing-large-documents.html"},{"title":"Paragraphs","text":"Copied from, https://developers.google.com/tech-writing. Paragraphs Estimated Time: 10 minutes This unit provides some guidelines on building cohesive paragraphs. But first, here is an inspirational message: The work of writing is simply this: untangling the dependencies among the parts of a topic, and presenting those parts in a logical stream that enables the reader to understand you. Write a great opening sentence The opening sentence is the most important sentence of any paragraph. Busy readers focus on opening sentences and sometimes skip over subsequent sentences. Therefore, focus your writing energy on opening sentences. Good opening sentences establish the paragraph's central point. For example, the following paragraph features an effective opening sentence: A loop runs the same block of code multiple times. For example, suppose you wrote a block of code that detected whether an input line ended with a period. To evaluate a million input lines, create a loop that runs a million times. The preceding opening sentence establishes the theme of the paragraph as an introduction to loops. By contrast, the following opening sentence sends readers in the wrong direction: A block of code is any set of contiguous code within the same function. For example, suppose you wrote a block of code that detected whether an input line ended with a period. To evaluate a million input lines, create a loop that runs a million times. Exercise Is the opening sentence of the following paragraph effective or defective? The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The k-means clustering algorithm relies on the Pythagorean Theorem to measure distances. By contrast, the k-median clustering algorithm relies on the Manhattan Distance. Click the icon to see the answer. This opening sentence is defective because it implies that the paragraph will focus on the Pythagorean Theorem. In fact, the paragraph's focus is actually clustering algorithms. The following would be a more effective opening sentence: Different clustering algorithms measure distances differently. Note: Effective opening sentences can take many forms. That is, not all great paragraphs start with a sentence that states the theme. Starting a paragraph with a rhetorical question, for example, can engage readers. Focus each paragraph on a single topic A paragraph should represent an independent unit of logic. Restrict each paragraph to the current topic. Don't describe what will happen in a future topic or what happened in a past topic. When revising, ruthlessly delete (or move to another paragraph) any sentence that doesn't directly relate to the current topic. For example, assume that the opening sentence of the following paragraph does focus on the correct topic. Can you spot the sentences that should be removed from the following paragraph? The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The perimeter of a triangle is equal to the sum of the three sides. You can use the Pythagorean Theorem to measure diagonal distances. For example, if you know the length and width of a ping-pong table, you can use the Pythagorean Theorem to determine the diagonal distance. To calculate the perimeter of the ping-pong table, sum the length and the width, and then multiply that sum by 2. We've crossed out the second and fifth sentences to yield a paragraph focused exclusively on the Pythagorean Theorem: The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. ~~The perimeter of a triangle is equal to the sum of the three sides.~~ You can use the Pythagorean Theorem to measure diagonal distances. For example, if you know the length and width of a ping-pong table, you can use the Pythagorean Theorem to determine the diagonal distance. ~~To calculate the perimeter of the ping-pong table, sum the length and the width, and then multiply that sum by 2.~~ Exercise Remove the extraneous sentence(s) from the following paragraph. Assume that the opening sentence does establish the desired theme for the paragraph: Spreadsheets provide a great way to organize data. Think of a spreadsheet as a table with rows and columns. Spreadsheets also provide mathematical functions, such as means and standard deviations. Each row holds details about one entity. Each column holds details about a particular parameter. For example, you can create a spreadsheet to organize data about different trees. Each row would represent a different type of tree. Each column would represent a different characteristic, such as the tree's height or the tree's spread. Click the icon to see the answer. The paragraph focuses on spreadsheets as a way of organizing data. The third sentence distracts from that theme. Move the third sentence to another paragraph about mathematical operations in spreadsheets. Spreadsheets provide a great way to organize data. Think of a spreadsheet as a table with rows and columns. ~~Spreadsheets also provide mathematical functions, such as means and standard deviations.~~ Each row holds details about one entity. Each column holds details about a particular parameter. For example, you can create a spreadsheet to organize data about different trees. Each row would represent a different type of tree. Each column would represent a different characteristic, such as the tree's height or the tree's spread. Don't make paragraphs too long or too short Long paragraphs are visually intimidating. Very long paragraphs form a dreaded \"wall of text\" that readers ignore. Readers generally welcome paragraphs containing three to five sentences, but will avoid paragraphs containing more than about seven sentences. When revising, consider dividing very long paragraphs into two separate paragraphs. Conversely, don't make paragraphs too short. If your document contains plenty of one-sentence paragraphs, your organization is faulty. Seek ways to combine those one-sentence paragraphs into cohesive multi-sentence paragraphs or possibly into lists. Answer what, why, and how Good paragraphs answer the following three questions: What are you trying to tell your reader? Why is it important for the reader to know this? How should the reader use this knowledge. Alternatively, how should the reader know your point to be true? For example, the following paragraph answers what, why, and how: The garp() function returns the delta between a dataset's mean and median. Many people believe unquestioningly that a mean always holds the truth. However, a mean is easily influenced by a few very large or very small data points. Call garp() to help determine whether a few very large or very small data points are influencing the mean too much. A relatively small garp() value suggests that the mean is more meaningful than when the garp() value is relatively high.","tags":"Writing","url":"paragraphs.html","loc":"paragraphs.html"},{"title":"Punctuation","text":"Copied from, https://developers.google.com/tech-writing. Punctuation (optional) Estimated Time: 5 minutes This optional unit provides a quick refresher on punctuation marks. Commas Programming languages enforce clear rules about punctuation. In English, by contrast, the rules regarding commas are somewhat hazier. As a guideline, insert a comma wherever a reader would naturally pause somewhere within a sentence. For the musically inclined, if a period is a whole note rest, then a comma is perhaps a half-note or quarter-note rest. In other words, the pause for a comma is shorter than that for a period. For example, if you read the following sentence aloud, you probably rest briefly before the word just : C behaves as a mid-level language, just a couple of steps up in abstraction from assembly language. Some situations require a comma. For example, use commas to separate items in an embedded list like the following: Our company uses C++, Python, Java, and JavaScript. You might be wondering about a list's final comma, the one inserted between items N-1 and N. This comma---known as the serial comma or Oxford comma ---is controversial. We recommend supplying that final comma simply because technical writing requires picking the least ambiguous solution. That said, we actually prefer circumventing the controversy by converting embedded lists into bulleted lists. In sentences that express a condition, place a comma between the condition and the consequence. For example, both of the following sentences supply the comma in the correct place: If the program runs slowly, try the --perf flag. If the program runs slowly, then try the --perf flag. You can also wedge a quick definition or digression between a pair of commas as in the following example: Python, an easy-to-use language, has gained significant momentum in recent years. Finally, avoid using a comma to paste together two independent thoughts. For example, the comma in the following sentence is guilty of a punctuation felony called a comma splice : Samantha is a wonderful coder, she writes abundant tests. Use a period rather than a comma to separate two independent thoughts. For example: Samantha is a wonderful coder. She writes abundant tests. Exercise Add commas where appropriate to the following passage: Protocol Buffers sometimes known as protobufs are our team's main structured data format. Use Protocol Buffers to represent store and transfer structured data. Unlike XML Protocol Buffers are compiled. Consequently clients transmit Protocol Buffers efficiently which has led to rapid adoption. Hint: Read the passage aloud and put a comma everywhere you hear a short pause. Click the icon to see the answer. Here is one possible solution: Protocol Buffers , sometimes known as protobufs , are our team's main structured data format. Use Protocol Buffers to represent , store , and transfer structured data. Unlike XML , Protocol Buffers are compiled. Consequently , clients transmit Protocol Buffers efficiently , which has led to rapid adoption. Semicolons A period separates distinct thoughts; a semicolon unites highly related thoughts. For example, notice how the semicolon in the following sentence unites the first and second thoughts: Rerun Frambus after updating your configuration file; don't rerun Frambus after updating existing source code. The thoughts preceding and following the semicolon must each be grammatically complete sentences. For example, the following semicolon is incorrect because the passage following the semicolon is not a complete sentence: Rerun Frambus after updating your configuration file; not after updating existing source code. Before using a semicolon, ask yourself whether the sentence would still make sense if you flipped the thoughts to opposite sides of the semicolon. For example, reversing the earlier example still yields a valid sentence: Don't rerun Frambus after updating existing source code; rerun Frambus after updating your configuration file. You should almost always use commas, not semicolons, to separate items in an embedded list. For example, the following use of semicolons is incorrect : Style guides are bigger than the moon; more essential than oxygen; and completely inscrutable. Many sentences place a transition word or phrase immediately after the semicolon. In this situation, place a comma after the transition. Note the comma after the transition in the following two examples: Frambus provides no official open source package for string manipulation; however , subsets of string manipulation packages are available from other open source projects. Even seemingly trivial code changes can cause bugs; therefore , write abundant unit tests. Exercise Which of the following periods or commas could you replace with a semicolon? Python is a popular programming language. The C language was developed long before Python. Model learning for a low value of X appears in the top illustration. Model learning for a high value of X appears in the bottom illustration. I'm thankful for my large monitor, powerful CPU, and blazing bandwidth. Click the icon to see the answer. You may not convert the period in #1 to a semicolon because the two sentences are only vaguely related. You may replace the period in #2 with a semicolon because the two sentences are so highly related. You may not convert the commas in #3 to semicolons. Use commas to separate items in an embedded list. Em-Dashes Em-dashes are compelling punctuation marks, rich with punctuation possibilities. An em-dash represents a longer pause---a bigger break---than a comma. If a comma is a quarter note rest, then an em-dash is a half-note rest. For example: C++ is a rich language---one requiring extensive experience to master. Writers sometimes use a pair of em-dashes to block off a digression, as in the following example: Protocol Buffers ---often nicknamed protobufs ---encode structured data in an efficient yet extensible format. Could we have used commas instead of em-dashes in the preceding examples? Sure. Why did we choose an em-dash instead of a comma? Feel. Art. Experience. Remember---punctuation in English is squishy and malleable. Parentheses Use parentheses to hold minor points and digressions. Parentheses inform readers that the enclosed text isn't critical. The rules regarding periods and parentheses have tripped up many a writer. Here are the standards: If a pair of parentheses holds an entire sentence, the period goes inside the closing parenthesis. If a pair of parentheses ends a sentence but does not hold the entire sentence, the period goes just outside the closing parenthesis. For example: (Incidentally, Protocol Buffers make great birthday gifts.) Binary mode relies on the more compact native form (described later in this document).","tags":"Writing","url":"punctuation.html","loc":"punctuation.html"},{"title":"Self-editing","text":"Copied from, https://developers.google.com/tech-writing. Self-editing Estimated Time: 10 minutes Imagine that you just wrote the first draft of a document. How do you make it better? In most cases, working towards a final published document is an iterative process. Transforming a blank page into a first draft is often the hardest step. After you write a first draft, make sure you set aside plenty of time to refine your document. The editing tips in this unit can help turn your first draft into a document that more clearly communicates the information your audience needs. Use one tip or use them all; the important thing is to find a strategy that works for you, and then make that strategy part of your writing routine. Note: The tips in this unit build on the basic writing and editing skills from Technical Writing One. This unit includes a summary of useful editing techniques from that course. For a more detailed refresher, visit the self-study units from Technical Writing One. Adopt a style guide Companies, organizations, and large open source projects frequently either adopt an existing style guide for their documentation or write their own. Many of the documentation projects on the Google Developers site follow the Google Developer Documentation Style Guide . If you've never relied on a style guide before, at first glance the Google Developer Documentation Style Guide might seem a little intimidating, offering detailed guidance on topics such as grammar, punctuation, formatting, and documenting computer interfaces. You might prefer to start by adopting the style-guide highlights . Note: For smaller projects, such as team documentation or a small open source project, you might find the highlights are all you need. Some of the guidelines listed in the highlights are covered in Technical Writing One. You might recall some of the following techniques: Use active voice to make clear who's performing the action. Format sequential steps as numbered lists . Format most other lists as bulleted lists. The highlights introduce many other techniques that can be useful when writing technical documentation, such as: Write in the second person . Refer to your audience as \"you\" rather than \"we\". Place conditional clauses before an instruction , rather than after. Format code-related text as code font . Think like your audience Who is your audience? Step back and try to read your draft from their point of view. Make sure the purpose of your document is clear, and provide definitions for any terms or concepts that might be unfamiliar to your readers. It can be helpful to outline a persona for your audience. A persona can consist of any of the following attributes: A role, such as Systems Engineer or QA Tester . An end goal, such as Restore the database . A set of assumptions about the persona and their knowledge and experience. For example, you might assume that your persona is: Familiar with Python. Running a Linux operating system. Comfortable following instructions for the command line. You can then review your draft with your persona in mind. It can be especially useful to tell your audience about any assumptions you've made. You can also provide links to resources where they can learn more if they need to brush up on a specific topic. Note that relying too heavily on a persona (or two) can result in a document that is too narrowly focused to be useful to the majority of your readers. For a refresher and more information on this topic from Technical Writing One, see the Audience self-study unit. Read it out loud Depending on the context, the style of your writing can alienate, engage, or even bore your audience. The desired style of a given document depends to an extent on the audience. For example, the contributor guide for a new open source project aimed at recruiting volunteers might adopt a more informal and conversational style, while the developer guide for a commercial enterprise application might adopt a more formal style. To check your writing is conversational, read it out loud. Listen for awkward phrasing, too-long sentences, or anything else that doesn't feel natural. Alternatively, you can also try asking someone else to read your draft out loud for you. For more information on adjusting the style of your writing to suit your audience, see Style and authorial tone . Come back to it later After you write your first draft (or second or third), set it aside. Come back to it after an hour (or two or three) and try to read it with fresh eyes. You'll almost always notice something that you could improve. Change the context Some writers like to print their documentation and review a paper copy, red pencil in hand. A change of context when reviewing your own work can help you find things to improve. For a modern take on this classic tip, copy your draft into a different document and change the font, size, and color. Find a peer editor Just as engineers need peers to review their code, writers need editors to give them feedback on docs. Ask someone to review your document and give you specific, constructive comments. Your peer editor doesn't need to be a subject matter expert on the technical topic of your document, but they do need to be familiar with the style guide you follow. Exercise If you have a document that you're working on, use one or more of the tips on this page to make it better. If you don't have a document in progress, edit the paragraph below. Determine whether or not you can simplify your document through the use of terminology that is equivalent but relatively shorter in length and therefore more easily comprehensible by your audience. It's important to make sure your document is edited before it is seen by your audience, which might include people that are less or more familiar with the matter covered by your document. The first thing you need is a rough draft. Some things that can help make your document easier to read are making sure you have links to background information, and also checking for active voice instead of passive voice. If you have long sentences you can consider shortening them or implementing the use of a list to make the information easier to scan. Click the icon to see the answer. To help your audience understand your document, apply these basic editing principles: Use active voice instead of passive voice. Consider using simpler words that mean the same thing. Include links to background information. Break long sentences into shorter sentences or lists.","tags":"Writing","url":"self-editing.html","loc":"self-editing.html"},{"title":"Short sentences","text":"Copied from, https://developers.google.com/tech-writing. Short sentences Estimated Time: 20 minutes Software engineers generally try to minimize the number of lines of code in an implementation for the following reasons: Shorter code is typically easier for others to read. Shorter code is typically easier to maintain than longer code. Extra lines of code introduce additional points of failure. In fact, the same rules apply to technical writing: Shorter documentation reads faster than longer documentation. Shorter documentation is typically easier to maintain than longer documentation. Extra lines of documentation introduce additional points of failure. Finding the shortest documentation implementation takes time but is ultimately worthwhile. Short sentences communicate more powerfully than long sentences, and short sentences are usually easier to understand than long sentences. Focus each sentence on a single idea Focus each sentence on a single idea, thought, or concept. Just as statements in a program execute a single task, sentences should execute a single idea. For example, the following very long sentence contains multiple thoughts: The late 1950s was a key era for programming languages because IBM introduced FORTRAN in 1957 and John McCarthy introduced Lisp the following year, which gave programmers both an iterative way of solving problems and a recursive way. Breaking the long sentence into a succession of single-idea sentences yields the following result: The late 1950s was a key era for programming languages. IBM introduced FORTRAN in 1957. John McCarthy invented Lisp the following year. Consequently, by the late 1950s, programmers could solve problems iteratively or recursively. Exercise Convert the following overly long sentence to a series of shorter sentences. Don't revise too much; just end up with a few sentences instead of only one. In bash, use the if, then, and fi statements to implement a simple conditional branching block in which the if statement evaluates an expression, the then statement introduces a block of statements to run when the if expression is true, and the fi statement marks the end of the conditional branching block. Click the icon to see the answer. In bash, use an if , then , and fi statement to implement a simple conditional branching block. The if statement evaluates an expression. The then statement introduces a block of statements to run when the if expression is true. The fi statement marks the end of the conditional branching block. (The resulting paragraph remains unclear but is still much easier to read than the original sentence.) Convert some long sentences to lists Inside many long technical sentences is a list yearning to break free. For example, consider the following sentence: To alter the usual flow of a loop, you may use either a break statement (which hops you out of the current loop) or a continue statement (which skips past the remainder of the current iteration of the current loop). When you see the conjunction or in a long sentence, consider refactoring that sentence into a bulleted list. When you see an embedded list of items or tasks within a long sentence, consider refactoring that sentence into a bulleted or numbered list. For example, the preceding example contains the conjunction or , so let's convert that long sentence to the following bulleted list: To alter the usual flow of a loop, call one of the following statements: break , which hops you out of the current loop. continue , which skips past the remainder of the current iteration of the current loop. Exercise Refactor the following sentences into something shorter and clearer. Make sure that your answer contains a list: To get started with the Frambus app, you must first find the app at a suitable store, pay for it using a valid credit or debit card, download it, configure it by assigning a value for the Foo variable in the /etc/Frambus file, and then run it by saying the magic word twice. KornShell was invented by David Korn in 1983, then a computer scientist at Bell Labs, as a superset of features, enhancements, and improvements over the Bourne Shell (which it was backwards compatible with), which was invented by Stephen Bourne in 1977 who was also a computer scientist at Bell Labs. Click the icon to see the answer. Take the following steps to get started with the Frambus app: Find the app at a suitable store. Pay for the app using a valid credit or debit card. Download the app. Configure the app by assigning a value for the Foo variable in the /etc/Frambus file. Run the app by saying the magic word twice. The following two Bell Labs computer scientists invented popular shells: Stephen Bourne invented the Bourne Shell in 1977. David Korn invented the KornShell in 1983. The KornShell's features are a backwards-compatible superset of the Bourne Shell's. Eliminate or reduce extraneous words Many sentences contain filler---textual junk food that consumes space without nourishing the reader. For example, see if you can spot the unnecessary words in the following sentence: An input value greater than 100 causes the triggering of logging. Replacing causes the triggering of with the much shorter verb triggers yields a shorter sentence: An input value greater than 100 triggers logging. With practice, you'll spot the extraneous words and take inordinate glee in removing or reducing them. For example, consider the following sentence: This design document provides a detailed description of Project Frambus. The phrase provides a detailed description of reduces to the verb details , so the resulting sentence becomes: This design document details Project Frambus. The following table suggests replacements for a few common bloated phrases: Wordy Concise at this point in time now determine the location of find is able to can Exercise Shorten the following sentences without changing their meaning: In spite of the fact that Arnold writes buggy code, he writes error-free documentation. Changing the sentence from passive voice to active voice enhances the clarification of the key points. Determine whether Rikona is able to write code in COBOL. Frambus causes the production of bugs, which will be chronicled in logs by the LogGenerator method. Click the icon to see the answer. Here are some possible solutions: Although Arnold writes buggy code, he writes error-free documentation.\\ Alternative answer: Arnold writes buggy code. However, he writes error-free documentation. Changing the sentence from passive voice to active voice clarifies the key points. Determine whether Rikona can code in COBOL. Frambus produces bugs, which the LogGenerator method logs. Reduce subordinate clauses (optional) A clause is an independent logical fragment of a sentence, which contains an actor and an action. Every sentence contains the following: a main clause zero or more subordinate clauses Subordinate clauses modify the idea in the main clause. As the name implies, subordinate clauses are less important than the main clause. For example, consider the following sentence: Python is an interpreted programming language, which was invented in 1991. main clause: Python is an interpreted programming language subordinate clause: which was invented in 1991 You can usually identify subordinate clauses by the words that introduce them. The following list (by no means complete) shows common words that introduce subordinate clauses: which that because whose until unless since Some subordinate clauses begin with a comma and some don't. The highlighted subordinate clause in the following sentence, for example, begins with the word because and does not contain a comma: I prefer to code in C++ because I like strong data typing. When editing, scrutinize subordinate clauses. Keep the one sentence = one idea formula in mind. Do the subordinate clauses in a sentence extend the single idea or do they branch off into a separate idea? If the latter, consider dividing the offending subordinate clause(s) into separate sentences. Exercise Determine which of the sentences contain subordinate clauses that should be branched off into separate sentences. (Don't rewrite the sentences, just identify the sentences that should be rewritten.) Python is an interpreted language, which means that the language can execute source code directly. Bash is a modern shell scripting language that takes many of its features from KornShell 88, which was developed at Bell Labs. Lisp is a programming language that relies on Polish prefix notation, which is one of the systems invented by the Polish logician Jan Łukasiewicz. I don't want to say that FORTRAN is old, but only radiocarbon dating can determine its true age. Click the icon to see the answer. We've shaded the subordinate clauses. Python is an interpreted language, which means that the language can execute source code directly. The subordinate clause in this sentence extends the main idea, so this sentence is fine as is. Bash is a modern shell scripting language that takes many of its features from KornShell 88, which was developed at Bell Labs. The first subordinate clause extends the main idea, but the second subordinate clause goes in another direction. Divide this sentence in two. Lisp is a programming language that relies on Polish prefix notation, which is one of the systems invented by the Polish logician Jan Łukasiewicz. The first subordinate clause is clearly critical to the sentence, but the second subordinate clause takes the reader too far away from the main clause. Divide this sentence in two. I don't want to say that Fortran is old, but only radiocarbon dating can determine its true age. The subordinate clause is critical to the sentence, so this sentence is fine as is. Distinguish that from which That and which both introduce subordinate clauses. What's the difference between them? Well, in some countries, the two words are pretty much interchangeable. Inevitably though, alert readers from the United States will angrily announce that you confused the two words again. In the United States, reserve which for nonessential subordinate clauses, and use that for an essential subordinate clause that the sentence can't live without. For example, the key message in the following sentence is that Python is an interpreted language; the sentence can survive without Guide van Rossum invented : Python is an interpreted language, which Guido van Rossum invented. By contrast, the following sentence requires don't involve linear algebra : FORTRAN is perfect for mathematical calculations that don't involve linear algebra. If you read a sentence aloud and hear a pause just before the subordinate clause, then use which . If you don't hear a pause, use that . Go back and read the preceding two example sentences. Do you hear the pause in the first sentence? Place a comma before which ; do not place a comma before that .","tags":"Writing","url":"short-sentences.html","loc":"short-sentences.html"},{"title":"Words","text":"Copied from, https://developers.google.com/tech-writing. Words Estimated Time: 10 minutes We researched documentation extensively, and it turns out that the best sentences in the world consist primarily of words. Define new or unfamiliar terms When writing or editing, learn to recognize terms that might be unfamiliar to some or all of your target audience. When you spot such a term, take one of the following two tactics: If the term already exists, link to a good existing explanation. (Don't reinvent the wheel.) If your document is introducing the term, define the term. If your document is introducing many terms, collect the definitions into a glossary. Use terms consistently If you change the name of a variable midway through a method, your code won't compile. Similarly, if you rename a term in the middle of a document, your ideas won't compile (in your users' heads). The moral: apply the same unambiguous word or term consistently throughout your document. Once you've named a component thingy , don't rename it thingamabob . For example, the following paragraph mistakenly renames Protocol Buffers to protobufs : Protocol Buffers provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs. Yes, technical writing is cruel and restrictive, but at least technical writing provides an excellent workaround. Namely, when introducing a long-winded concept name or product name, you may also specify a shortened version of that name. Then, you may use that shortened name throughout the document. For example, the following paragraph is fine: Protocol Buffers (or protobufs for short) provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs. Use acronyms properly On the initial use of an unfamiliar acronym within a document or a section, spell out the full term, and then put the acronym in parentheses. Put both the spelled-out version and the acronym in boldface. For example: This document is for engineers who are new to the Telekinetic Tactile Network ( TTN ) or need to understand how to order TTN replacement parts through finger motions. You may then use the acronym going forward, as in the following example: If no cache entry exists, the Mixer calls the OttoGroup Server ( OGS ) to fetch Ottos for the request. The OGS is a repository that holds all servable Ottos. The OGS is organized in a logical tree structure, with a root node and two levels of leaf nodes. The OGS root forwards the request to the leaves and collects the responses. Do not cycle back-and-forth between the acronym and the expanded version in the same document. Use the acronym or the full term? Sure, you can introduce and use acronyms properly, but should you use acronyms? Well, acronyms do reduce sentence size. For example, TTN is two words shorter than Telekinetic Tactile Network . However, acronyms are really just a layer of abstraction; readers must mentally expand recently learned acronyms to the full term. For example, readers convert TTN to Telekinetic Tactile Network in their heads, so the \"shorter\" acronym actually takes a little longer to process than the full term. Heavily used acronyms develop their own identity. After a number of occurrences, readers generally stop expanding acronyms into the full term. Many Web developers, for example, have forgotten what HTML expands to. Here are the guidelines for acronyms: Don't define acronyms that would only be used a few times. Do define acronyms that meet both of the following criteria: The acronym is significantly shorter than the full term. The acronym appears many times in the document. Exercise Fix the following passage. Assume that this passage is the initial instance of the term MapReduce in the document and that MR is the best abbreviation: Jeff Dean invented MapReduce in 1693, implementing the algorithm on a silicon-based computer fabricated from beach sand, wax-paper, a quill pen, and a toaster oven. This version of MR held several world performance records until 2014. Click the icon to see the answer. You could take a few different approaches here. One approach is to associate the acronym MR with the full term and then use that acronym: Jeff Dean invented MapReduce ( MR ) in... This version of MR held several... Alternatively, you could decide that defining an acronym for such a short passage puts too much burden on readers, so you'll simply use the full term MapReduce every time: Jeff Dean invented MapReduce in... This version of MapReduce held several... Incidentally, a more thorough technical writer would also convert \"beach sand, wax-paper, a quill pen, and a toaster oven\" into a bulleted list. However, that's another story for another lesson. Disambiguate pronouns Many pronouns point to a previously introduced noun. Such pronouns are analogous to pointers in programming. Like pointers in programming, pronouns tend to introduce errors. Improperly using pronouns causes the cognitive equivalent of a null pointer error in your readers' heads. In many cases, you should simply avoid the pronoun and just reuse the noun. However, the utility of a pronoun sometimes outweighs its risk (as in this sentence). Consider the following pronoun guidelines: Only use a pronoun after you've introduced the noun; never use the pronoun before you've introduced the noun. Place the pronoun as close as possible to the referring noun. As a rule of thumb, if more than five words separate your noun from your pronoun, consider repeating the noun instead of using the pronoun. If you introduce a second noun between your noun and your pronoun, reuse your noun instead of using a pronoun. It and they The following pronouns cause the most confusion in technical documentation: it they, them, and their For example, in the following sentence, does It refer to Python or to C++? Python is interpreted, while C++ is compiled. It has an almost cult-like following. As another example, what does their refer to in the following sentence? Be careful when using Frambus or Carambola with HoobyScooby or BoiseFram because a bug in their core may cause accidental mass unfriending. This and that Consider two additional problem pronouns: this that For example, in the following ambiguous sentence, This could refer to Frambus, to Foo, or to both: You may use either Frambus or Foo to calculate derivatives. This is not optimal. Use either of the following tactics to disambiguate this and that : Replace this or that with the appropriate noun. Place a noun immediately after this or that . For example, either of the following sentences disambiguate the previous example: Overlapping functionality is not optimal. This overlapping functionality is not optimal. Exercise Identify all possible meanings for the ambiguous pronouns in each of the following passages: Aparna and Phil share responsibilities with Maysam and Karan and they are the next ones on call. You may import Carambola data via your configuration file or dynamically at run time. This may be a security risk. Click the icon to see the answer. The pronoun they could refer to any of the following: Aparna and Phil Maysam and Karan Aparna, Phil, Maysam, and Karan The pronoun this could refer to any of the following: importing via the configuration file importing dynamically at run time both","tags":"Writing","url":"words.html","loc":"words.html"},{"title":"Coronavirus 2019 Analysis","text":"Country to country comparison Here we put several country together and highlight significant events happened in each country. Related source code and data can be found here . Country incremental Daily updated chart. On x axis we plot number of days since first 100 accumulative cases. On y axis, we show daily incremental cases in log scale. With this chart, we can easily tell whether the virus is spreading exponentially or it's slowing down. Static chart. Country accumulative Interesting spots: May 12 Canada, US and Italy have plateaued. However, we do see South Korea is struggling in the last few days. It's a good indication that the virus can easily bounce back if people don't follow social distancing properly. Both US and Canada has started easing virus lock down rules last week. So we will how the curve trends in 2 weeks. March 24 US has taken over Italy on daily incremental. Both US and Italy will have more cases than China Italy has seen effective results from the lock down. Their daily incremental is flattening out. March 15 After US approved widespread virus testing, number of confirmed cases jumped. This means that the virus was already spreading actively. Second jump in US is interesting but there is no significant public event associated with it. After China's Wuhan lock down. It takes 4 weeks for the virus to calm down. Given virus takes 2 weeks to show symptom on average. We can probably say the transmission slows down after 2 weeks of lock down. Given Wuhan's data, we can say it will take 2 weeks of lock down to slow down the transmission and another 2 weeks to contain the spread. If lock down stops within this 4 weeks. The effort will be gone and we may see the virus start spreading again. Italy started national lock down on day 20. We shall see how this pan out according to discovery above. Important call out: Controlling the spread using lockdown is important as it eases the load our health system. It will take 4 weeks for lockdown to effectively decrease cases. That is if the healthy care system is currently under load or over loaded and we start the lockdown right now. The situation in our medical system will not improve until 4 weeks later. References Virus data WHO Coronavirus full data Timeline events South Korea Singapore Italy NYTimes Coronavirus pandemic","tags":"data_analysis","url":"coronavirus-2019-analysis.html","loc":"coronavirus-2019-analysis.html"},{"title":"Distributed Task with Celery","text":"This article discusses code base setup and typical worker Nodes configurations for a distributed Celery worker system. Introduction Celery is a asynchronous task queue/job queue system that facilitates communications between Producer system and Consumer system. A typical setup can be shown as below. An advantage of this setup is that it enables separation of heavy loading operation from rest of application layers. It's easier to maintain and perform updates without affecting the entire system, essentially decouples system components. Challenges Task definition Task definition must be seen by both producer and consumer. But we would like to separate task implementation from producer to consumer. This is achieved through a shared celery task configuration code base between producer and consumer. Task queue configuration Different workers needs to be run on different host or queue. Otherwise worker might receive wrong task which were intended for other workers. Solution here is to use different queues for different tasks. Code base solutions Git setup Let's assume there are 2 git repos, one for Producer and one for Consumer . In order to shared Task definition, along with celery configuration, between Producer and Consumer , we create a 3rd git repo and add it as submodule for Producer and Consumer . So the setup looks like this. # producer git repo producer / src / ... celery_tasks / # shared repo as submodule celery_config . py tasks . py utils . py ... ... # consumer git repo consumer / src / ... celery_tasks / # shared repo as submodule celery_config . py tasks . py utils . py ... ... # shared celery task git repo celery_tasks / celery_config . py tasks . py utils . py ... celery_config.py contains celery worker configurations which we will use to create celery app object. For example # celery_config.py import os from celery_tasks.rabbitmq_config import RABBITMQ_PORT , RABBITMQ_PWD , RABBITMQ_USER , RABBITMQ_HOST ## Broker settings. broker_url = f 'pyamqp://{RABBITMQ_USER}:{RABBITMQ_PWD}@{RABBITMQ_HOST}:{RABBITMQ_PORT}' result_backend = 'rpc://' Shared Task definition celery_tasks repo contains dummy task class definitions. These classes needs to define class name, unique name of the task, run method and its arguments. These classes are defined in tasks.py . For example, # tasks.py import celery class MagicCeleryTask ( celery . Task ): name = 'unique_magic_task' def run ( self , arg1 , arg2 , arg3 ): \"\"\" place holder method :param arg1: arg1 is for this :type arg1: int :param arg2: arg2 is for that :type arg2: int :param arg3: arg3 is for another :type arg3: int :return: result :rtype: str \"\"\" pass Consumers will inherit these classes and provide actual implementations, the run method, which enables it to perform real computations. Producers will utilize these dummy method to send tasks to celery backend. For example, in consumer code base, inherit MagicCeleryTask and implement actual computation. from celery_tasks.tasks import MagicCeleryTask class ActualMagicCeleryTask ( MagicCeleryTask ): def run ( self , arg1 , arg2 , arg3 ): \"\"\" actual implementation \"\"\" return arg1 + arg2 + arg3 In producer, we can import the class directly. from celery_tasks.tasks import MagicCeleryTask Celery app queue configuration Queue is configured based on task name to avoid worker conflicts. In celery_tasks , we created a create_worker_from method defined in utils.py . # utils . py def create_worker_from ( WorkerClass , celery_config = ' celery_tasks . celery_config ') : \"\"\" Create worker instance given WorkerClass : param WorkerClass: WorkerClass to perform task : type WorkerClass: subclass of celery . Task : param celery_config: celery config module , default ' celery_tasks . celery_config '. This depends on project path : type celery_config: str : return : celery app instance and worker task instance : rtype: tuple of ( app , worker_task ) \"\"\" assert issubclass ( WorkerClass , celery . Task ) app = celery . Celery () app . config_from_object ( celery_config ) app . conf . update ( task_default_queue = WorkerClass . name ) # update worker queue worker_task = app . register_task ( WorkerClass ()) return app , worker_task In producer and consumer, we use this method and task class to create celery app and worker class instances for each task. Worker class instances are used to produce and consume tasks. For example, in consumer, from celery_tasks.tasks import MagicCeleryTask from celery_tasks.utils import create_worker_from class ActualMagicCeleryTask ( MagicCeleryTask ): def run ( self , arg1 , arg2 , arg3 ): \"\"\" actual implementation \"\"\" return arg1 + arg2 + arg3 # create celery app app , _ = create_worker_from ( MagicCeleryTask ) # start worker args = [ '--without-gossip' , '--without-mingle' , '--without-heartbeat' ] app . worker_main ( argv = args ) For example, in producer, from celery_tasks.tasks import MagicCeleryTask from celery_tasks.utils import create_worker_from # create worker _ , worker = create_worker_from ( MagicCeleryTask ) # send task to queue and get result result = worker . delay ( 1 , 2 , 3 ) . get ()","tags":"celery","url":"distributed-task-with-celery.html","loc":"distributed-task-with-celery.html"},{"title":"Use Pihole to Prevent Windows 10 Auto Update","text":"Pihole For those who haven't heard about Pihole, it's a light DNS service that can run on a device as small as a raspberry pi. It can be used as a DNS service to block certain unwanted domains. Most popular usage is to block advertisement and online tracking services. The GitHub page is here . Running a Pihole in docker We will be using docker to run a Pihole service. Pihole has an official docker image that can be found here . A docker-compose file is also provided on their GitHub page. It's posted here for convenience. version : \"3\" # More info at https : // github . com / pi - hole / docker - pi - hole / and https : // docs . pi - hole . net / services : pihole : container_name : pihole image : pihole / pihole : latest ports : - \"53:53/tcp\" - \"53:53/udp\" - \"67:67/udp\" - \"80:80/tcp\" - \"443:443/tcp\" environment : TZ : 'America/Chicago' # WEBPASSWORD : 'set a secure password here or it will be random' # Volumes store your data between container upgrades volumes : - './etc-pihole/:/etc/pihole/' - './etc-dnsmasq.d/:/etc/dnsmasq.d/' dns : - 127 . 0 . 0 . 1 - 1 . 1 . 1 . 1 # Recommended but not required ( DHCP needs NET_ADMIN ) # https : // github . com / pi - hole / docker - pi - hole # note - on - capabilities cap_add : - NET_ADMIN restart : unless - stopped Let's assume Pihole is running on a local server with IP address 192.168.0.254 . On web browser, go to that IP address. A pihole page should show up. Click on Did you mean to go to the admin panel? . This will bring us to the admin page. Click on login in and enter the password defined in the docker-compose.yml file. Configure Pihole to block Windows 10 update server Pihole's blocking mechanism are based on blacklist and whitelist. Navigate to Setting > Blocklists . Here you can add as many lists as you want. There are many community list out there that block different types of services. You can see I have a lot of them added. At the bottom of the list, we can see a place where we can add more lists. The URL we are using is from here . Many thanks to krathalan and in2016minewastaken from reddit. Enter the url and click on Save and Update to update the rules, Configure Windows to use the Pihole as DNS server There are 2 options here. Configure specific machines we would like to prevent auto update or apply this on all Windows 10 machines on the local network. To configure specific machines, just configure the DNS server on each machine to 192.168.0.254 . To configure for all machines on the local network, configure router's DNS server to 192.168.0.254 . Refer to your router manual to setup this. And that's it! Next time Windows machines try to get an update, it will hit a wall at our DNS server and fail.","tags":"pihole","url":"use-pihole-to-prevent-windows-10-auto-update.html","loc":"use-pihole-to-prevent-windows-10-auto-update.html"},{"title":"Kubernetes Persistent Volume","text":"This article is a summary of the tutorial . It utilizes manifest file to create deployments and services. Objectives In this tutorial, we will deploy a WordPress and MySQL service using persistent volumes for data storage. A PersistentVolume (PV) is a piece of storage in the cluster that has been manually provisioned by an administrator, or dynamically provisioned by Kubernetes using a StorageClass . A PersistentVolumeClaim (PVC) is a request for storage by a user that can be fulfilled by a PV. PersistentVolumes and PersistentVolumeClaims are independent from Pod lifecycles and preserve data through restarting, rescheduling, and even deleting Pods. Create PersistentVolumeClaims and PersistentVolumes MySQL and Wordpress each require a PersistentVolume to store data. Their PersistentVolumeClaims will be created at the deployment step. Many cluster environments have a default StorageClass installed. When a StorageClass is not specified in the PersistentVolumeClaim, the cluster's default StorageClass is used instead. When a PersistentVolumeClaim is created, a PersistentVolume is dynamically provisioned based on the StorageClass configuration. Create a Secret for MySQL Password A Secret is an object that stores a piece of senstive information like a password or a key. Once a Secret is created, it can be refer to in manifest files like an environment variable. Create a Secret object using the following command, replacing YOUR_PASSWORD with your own password. $ kubectl create secret generic mysql-pass --from-literal = password = YOUR_PASSWORD This creates a mysql-pass object with key value pair password and YOUR_PASSWORD . Verify the Secret exists using the following command, $ kubectl get secrets NAME TYPE DATA AGE mysql-pass Opaque 1 42s Notice that the content is not shown. Deploy MySQl The following manifest, mysql-deployment.yaml , describes a single-instance MySQL Deployment. The MySQL container mounts the PersistentVolume at /var/lib/mysql. The MYSQL_ROOT_PASSWORD environment variable sets the database password from the Secret. apiVersion : v1 kind : Service metadata : name : wordpress - mysql labels : app : wordpress spec : ports : - port : 3306 selector : app : wordpress tier : mysql clusterIP : None --- apiVersion : v1 kind : PersistentVolumeClaim metadata : name : mysql - pv - claim labels : app : wordpress spec : accessModes : - ReadWriteOnce resources : requests : storage : 20 Gi --- apiVersion : apps /v1 # for versions before 1.9.0 use apps/ v1beta2 kind : Deployment metadata : name : wordpress - mysql labels : app : wordpress spec : selector : matchLabels : app : wordpress tier : mysql strategy : type : Recreate template : metadata : labels : app : wordpress tier : mysql spec : containers : - image : mysql : 5.6 name : mysql env : - name : MYSQL_ROOT_PASSWORD valueFrom : secretKeyRef : name : mysql - pass # Secret object key : password # key value pair value ports : - containerPort : 3306 name : mysql volumeMounts : - name : mysql - persistent - storage mountPath : /var/lib/ mysql volumes : - name : mysql - persistent - storage persistentVolumeClaim : claimName : mysql - pv - claim Deploy MySQL using the yaml file, $ kubectl create -f mysql-deployment.yaml Verify that a PersistentVolume got dynamically provisioned, $ kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE mysql-pv-claim Bound pvc-9ac5609d-4f32-11e9-9123-025000000001 20Gi RWO hostpath 8s Verify pods is running, $ kubectl get pods NAME READY STATUS RESTARTS AGE wordpress-mysql-bcc89f687-b5vb2 1 /1 Running 0 1m Deploy WordPress The following manifest file, wordpress-deployment.yaml , describes a single-instance WordPress Deployment and Service. It uses PVC for persistent storage and a Secret for password. It also use type: LoadBalancer . This setting exposes WordPress to traffic from outside of the cluter. apiVersion : v1 kind : Service metadata : name : wordpress labels : app : wordpress spec : ports : - port : 80 selector : app : wordpress tier : frontend type : LoadBalancer --- apiVersion : v1 kind : PersistentVolumeClaim metadata : name : wp - pv - claim labels : app : wordpress spec : accessModes : - ReadWriteOnce resources : requests : storage : 20 Gi --- apiVersion : apps /v1 # for versions before 1.9.0 use apps/ v1beta2 kind : Deployment metadata : name : wordpress labels : app : wordpress spec : selector : matchLabels : app : wordpress tier : frontend strategy : type : Recreate template : metadata : labels : app : wordpress tier : frontend spec : containers : - image : wordpress : 4.8 - apache name : wordpress env : - name : WORDPRESS_DB_HOST value : wordpress - mysql - name : WORDPRESS_DB_PASSWORD valueFrom : secretKeyRef : name : mysql - pass key : password ports : - containerPort : 80 name : wordpress volumeMounts : - name : wordpress - persistent - storage mountPath : /var/www/ html volumes : - name : wordpress - persistent - storage persistentVolumeClaim : claimName : wp - pv - claim Create a WordPress Service and Deployment form the file wordpress-deployment.yaml file, $ kubectl create -f wordpress-deployment.yaml Verify that a PersistentVolume got dynamically provisioned, $ kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE mysql-pv-claim Bound pvc-9ac5609d-4f32-11e9-9123-025000000001 20Gi RWO hostpath 8m wp-pv-claim Bound pvc-cf4a8bdc-4f33-11e9-9123-025000000001 20Gi RWO hostpath 12s Verify that Service is running, $ kubectl get services wordpress NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE wordpress LoadBalancer 10 .110.116.160 localhost 80 :31111/TCP 50s Check localhost on the browser and a WordPress page should show up. Cleaning up Run the following command to delete Secret, kubectl delete secret mysql-pass Run following command to delete all Deployments and Services, kubectl delete deployment -l app=wordpress; kubectl delete service -l app=wordpress Run the following commands to delete the PersistentVolumeClaims. kubectl delete pvc -l app=wordpress","tags":"Kubernetes","url":"kubernetes-persistent-volume.html","loc":"kubernetes-persistent-volume.html"},{"title":"Kubernetes Stateful Application","text":"This article is a summary of the tutorial . It utilizes manifest file to create deployments and services. Most of the time, we need to have persistent data saved at a location and when the service is restarted, the data was saved and can be loaded to restore its latest state. This is achived through stateful application in Kubernetes. Objective This tutorial covers basic steps deploy a simple web application using StatefulSet . The website is served in a html file by nginx. Create a StatefulSet Manage Pods through StatefulSet Delete a StatefulSet Scale a StatefulSet Update a StatefulSet's Pods Creating a StatefulSet Using the yaml file below, we create a headless service, nginx , to publish the IP addresses of Pods in the StatefulSet, web . The manifest file web.yaml . apiVersion : v1 kind : Service metadata : name : nginx labels : app : nginx spec : ports : - port : 80 name : web clusterIP : None selector : app : nginx --- apiVersion : apps / v1 kind : StatefulSet metadata : name : web spec : serviceName : \"nginx\" replicas : 2 selector : matchLabels : app : nginx template : metadata : labels : app : nginx spec : containers : - name : nginx image : k8s . gcr . io / nginx - slim : 0.8 ports : - containerPort : 80 name : web volumeMounts : - name : www mountPath : /usr/share/nginx/ html volumeClaimTemplates : - metadata : name : www spec : accessModes : [ \"ReadWriteOnce\" ] resources : requests : storage : 1 Gi In this tutorial, we will use two terminal windows. One uses kubectl get pods -w -l app=nginx command to get live update from Kubernetes service about the status of our pods. The other terminal window is used to execute command the deploy, update and delete Pods and StatefulSets. In the first terminal window execiute this command to watch the creation of the StatefulSet's Pods. kubectl get pods -w -l app=nginx In the second terminal, use kubectl create to create the headless Service and StatefulSet defined in web.yaml . $ kubectl create -f web.yaml service/nginx created statefulset.apps/web created Check the running service, $ kubectl get service nginx NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE nginx ClusterIP None <none> 80 /TCP 12s Check running statefulset $ kubectl get statefulset web NAME DESIRED CURRENT AGE web 2 1 20s On the first terminal, we should see the Pods being deployed in action. $ kubectl get pods -w -l app = nginx NAME READY STATUS RESTARTS AGE web-0 0 /1 Pending 0 0s web-0 0 /1 Pending 0 0s web-0 0 /1 ContainerCreating 0 0s web-0 1 /1 Running 0 19s web-1 0 /1 Pending 0 0s web-1 0 /1 Pending 0 0s web-1 0 /1 ContainerCreating 0 0s web-1 1 /1 Running 0 18s Pods in a StatefulSet Pods in a StatefulSet have a unique ordinal index and a stable network identity. Examping the Pod's Ordinal Index Get the StatefulSet's Pods. $ kubectl get pods -l app = nginx NAME READY STATUS RESTARTS AGE web-0 1 /1 Running 0 1m web-1 1 /1 Running 0 1m The Pods' names take the form <statefulset name>-<ordinal index> . Since the web StatefulSet has two replicas, it creates two Pods, web-0 and web-1 . Each Pod has a stable hostname based on its ordinal index. for i in 0 1 ; do kubectl exec web - $ i -- sh -c 'hostname'; done web - 0 web - 1 kubectl run - i --tty --image busybox:1.28 dns-test --restart=Never --rm nslookup web - 0 . nginx Server : 10 . 0 . 0 . 10 Address 1 : 10 . 0 . 0 . 10 kube - dns . kube - system . svc . cluster . local Name : web - 0 . nginx Address 1 : 10 . 244 . 1 . 6 nslookup web - 1 . nginx Server : 10 . 0 . 0 . 10 Address 1 : 10 . 0 . 0 . 10 kube - dns . kube - system . svc . cluster . local Name : web - 1 . nginx Address 1 : 10 . 244 . 2 . 6 Manage Pods in StatefulSet In second terminal, use kubectl delete to delete all Pods in the StatefulSet. $ kubectl delete pod -l app = nginx pod \"web-0\" deleted pod \"web-1\" deleted This will delete both pods but StatefulSet will restart then. The process is shown in the first terminal. $ kubectl get pod -w -l app = nginx NAME READY STATUS RESTARTS AGE web-0 0 /1 ContainerCreating 0 0s NAME READY STATUS RESTARTS AGE web-0 1 /1 Running 0 2s web-1 0 /1 Pending 0 0s web-1 0 /1 Pending 0 0s web-1 0 /1 ContainerCreating 0 0s web-1 1 /1 Running 0 34s Try print out the hostname again, for i in 0 1 ; do kubectl exec web - $ i -- sh -c 'hostname'; done web - 0 web - 1 kubectl run - i --tty --image busybox dns-test --restart=Never --rm /bin/sh nslookup web - 0 . nginx Server : 10 . 0 . 0 . 10 Address 1 : 10 . 0 . 0 . 10 kube - dns . kube - system . svc . cluster . local Name : web - 0 . nginx Address 1 : 10 . 244 . 1 . 7 nslookup web - 1 . nginx Server : 10 . 0 . 0 . 10 Address 1 : 10 . 0 . 0 . 10 kube - dns . kube - system . svc . cluster . local Name : web - 1 . nginx Address 1 : 10 . 244 . 2 . 8 The hostname persists, but IP addresses associated with the Pods maybe change. This is why it is important not to configure other applications to connect to Pods in a StatefulSet by IP address. Writing to stable storage We will be writing a text to the index page in the persistent volume. Get the PersistentVolumeClaims for web-0 and web-1 . $ kubectl get pvc -l app = nginx NAME STATUS VOLUME CAPACITY ACCESSMODES AGE www-web-0 Bound pvc-15c268c7-b507-11e6-932f-42010a800002 1Gi RWO 48s www-web-1 Bound pvc-15c79307-b507-11e6-932f-42010a800002 1Gi The NGINX webservers, by default, will serve an index file at /usr/share/nginx/html/index.html . The volumeMounts field in the StatefulSets spec ensures that the /usr/share/nginx/html directory is backed by a PersistentVolume. Write the Pods' hostnames to their index.html files and verify that the NGINX webservers serve the hostnames. for i in 0 1 ; do kubectl exec web - $ i -- sh -c 'echo $(hostname) > /usr/share/nginx/html/index.html'; done for i in 0 1 ; do kubectl exec - it web - $ i -- curl localhost; done web - 0 web - 1 Now let's delete the Pods: $ kubectl delete pod -l app = nginx pod \"web-0\" deleted pod \"web-1\" deleted StatefulSet will recreate these Pods and mount the same persistent volume onto them. Thus the changes we've written to index.html should still be there. Check the index.html again, for i in 0 1; do kubectl exec -it web-$i -- curl localhost; done web-0 web-1 Scaling a StatefulSet Scaling up In terminal 2, user kubectl scale to scale the number of replicas to 5. $ kubectl scale sts web --replicas = 5 statefulset.apps/web scaled In terminal 1, this change should show up kubectl get pods -w -l app=nginx NAME READY STATUS RESTARTS AGE web-0 1/1 Running 0 2h web-1 1/1 Running 0 2h NAME READY STATUS RESTARTS AGE web-2 0/1 Pending 0 0s web-2 0/1 Pending 0 0s web-2 0/1 ContainerCreating 0 0s web-2 1/1 Running 0 19s web-3 0/1 Pending 0 0s web-3 0/1 Pending 0 0s web-3 0/1 ContainerCreating 0 0s web-3 1/1 Running 0 18s web-4 0/1 Pending 0 0s web-4 0/1 Pending 0 0s web-4 0/1 ContainerCreating 0 0s web-4 1/1 Running 0 19s Scaling down Use kubectl patch to scale the StatefulSet back down to three replicas. $ kubectl patch sts web -p '{\"spec\":{\"replicas\":3}}' statefulset.apps/web patched In temrinal 1, the process should show up. kubectl get pods -w -l app=nginx NAME READY STATUS RESTARTS AGE web-0 1/1 Running 0 3h web-1 1/1 Running 0 3h web-2 1/1 Running 0 55s web-3 1/1 Running 0 36s web-4 0/1 ContainerCreating 0 18s NAME READY STATUS RESTARTS AGE web-4 1/1 Running 0 19s web-4 1/1 Terminating 0 24s web-4 1/1 Terminating 0 24s web-3 1/1 Terminating 0 42s web-3 1/1 Terminating 0 42s But the PersistenVolumes mounted to the Pods are not deleted when the StatefulSet's Pods are deleted. This is true when Pod deletion is caused by scaling the StatefulSet down. $ kubectl get pvc -l app = nginx NAME STATUS VOLUME CAPACITY ACCESSMODES AGE www-web-0 Bound pvc-15c268c7-b507-11e6-932f-42010a800002 1Gi RWO 13h www-web-1 Bound pvc-15c79307-b507-11e6-932f-42010a800002 1Gi RWO 13h www-web-2 Bound pvc-e1125b27-b508-11e6-932f-42010a800002 1Gi RWO 13h www-web-3 Bound pvc-e1176df6-b508-11e6-932f-42010a800002 1Gi RWO 13h www-web-4 Bound pvc-e11bb5f8-b508-11e6-932f-42010a800002 1Gi Updating StatefulSets The update strategy is determined by the spec.updateStrategy field of the StatefulSet API object. This feature can be used to upgrade the container images, resource requests and/or limits, labels, and annotations of the Pods in a StatefulSet. There are two valid update strategies, RollingUpdate and OnDelete . RollingUpdate strategy is the default for StatefulSets. Rollin gupdate RollingUpdate strategy update all Pods in a StatefulSet, in reverse ordinal order, while respecting the StatefulSet guarantees. Patch the web StatefulSet to apply the strategy, $ kubectl patch statefulset web -p '{\"spec\":{\"updateStrategy\":{\"type\":\"RollingUpdate\"}}}' statefulset.apps/web patched In terminal 2, patch the web to change the container image. $ kubectl patch statefulset web --type = 'json' -p = '[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/image\", \"value\":\"gcr.io/google_containers/nginx-slim:0.8\"}]' statefulset.apps/web patched In terminal 1, the process should be shown, kubectl get po -l app=nginx -w NAME READY STATUS RESTARTS AGE web-0 1/1 Running 0 7m web-1 1/1 Running 0 7m web-2 1/1 Running 0 8m web-2 1/1 Terminating 0 8m web-2 1/1 Terminating 0 8m web-2 0/1 Terminating 0 8m web-2 0/1 Terminating 0 8m web-2 0/1 Terminating 0 8m web-2 0/1 Terminating 0 8m web-2 0/1 Pending 0 0s web-2 0/1 Pending 0 0s web-2 0/1 ContainerCreating 0 0s web-2 1/1 Running 0 19s web-1 1/1 Terminating 0 8m web-1 0/1 Terminating 0 8m web-1 0/1 Terminating 0 8m web-1 0/1 Terminating 0 8m web-1 0/1 Pending 0 0s web-1 0/1 Pending 0 0s web-1 0/1 ContainerCreating 0 0s web-1 1/1 Running 0 6s web-0 1/1 Terminating 0 7m web-0 1/1 Terminating 0 7m web-0 0/1 Terminating 0 7m web-0 0/1 Terminating 0 7m web-0 0/1 Terminating 0 7m web-0 0/1 Terminating 0 7m web-0 0/1 Pending 0 0s web-0 0/1 Pending 0 0s web-0 0/1 ContainerCreating 0 0s web-0 1/1 Running 0 10s From the log, we can confirm that the Pods are updated in reverse ordinal order. The StatefulSet controller terminates each Pod, and waits for it to transition to Running and Ready prior to updating the next Pod. Note that, even though the StatefulSet controller will not proceed to update the next Pod until its ordinal successor is Running and Ready, it will restore any Pod that fails during the update to its current version. Pods that have already received the update will be restored to the updated version, and Pods that have not yet received the update will be restored to the previous version. In this way, the controller attempts to continue to keep the application healthy and the update consistent in the presence of intermittent failures. Check the Pods' images: for p in 0 1 2; do kubectl get po web-$p --template ' {{ range $ i , $ c := .spec.containers }}{{ $ c.image }}{{ end }} '; echo; done k8s.gcr.io/nginx-slim:0.8 k8s.gcr.io/nginx-slim:0.8 k8s.gcr.io/nginx-slim:0.8 kubectl rollout status sts/<name> can also view the status of a rolling update. Staging an update Staging an update can be achived by using the partition parameter of the RollingUpdate update strategy. It will keep all of the Pods in the StatefulSet at the current version while allowing mutation to the StatefulSet's .spec.template . Use the following command to issue the patch. kubectl patch statefulset web -p '{\"spec\":{\"updateStrategy\":{\"type\":\"RollingUpdate\",\"rollingUpdate\":{\"partition\":3}}}}' statefulset.apps/web patched \"partition\":3 covers the first 3 Pods in ordinal order. In this case web-2 is covered. Change the container's image, kubectl patch statefulset web --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/image\", \"value\":\"k8s.gcr.io/nginx-slim:0.7\"}]' statefulset.apps/web patched Delete the Pod in the StatefulSet, kubectl delete po web-2 pod \"web-2\" deleted Wait for StatefulSet to restart the Pod. Check the Pod's image again. kubectl get po web-2 --template ' {{ range $ i , $ c := .spec.containers }}{{ $ c.image }}{{ end }} ' k8s.gcr.io/nginx-slim:0.8 Notice that it's still on version 0.8 . StatefulSet controller restored the Pod with its original container. This is because the ordinal of the Pod is less than the partition specified by the updateStrategy . Rolling out a Canary To roll out a canary to test, we can dcrementing the partition number. $ kubectl patch statefulset web -p '{\"spec\":{\"updateStrategy\":{\"type\":\"RollingUpdate\",\"rollingUpdate\":{\"partition\":2}}}}' statefulset.apps/web patched This will cover web-0 and web-1 , web-2 is no longer covered and will be restarted. Wait for web-2 to be Running and Ready. $ kubectl get po -l app = nginx -w NAME READY STATUS RESTARTS AGE web-0 1 /1 Running 0 4m web-1 1 /1 Running 0 4m web-2 0 /1 ContainerCreating 0 11s web-2 1 /1 Running 0 18s Check the Pod's container, kubectl get po web-2 --template ' {{ range $ i , $ c := .spec.containers }}{{ $ c.image }}{{ end }} ' k8s.gcr.io/nginx-slim:0.7 When you changed the partition , the StatefulSet controller automatically updated the web-2 Pod because the Pod's ordinal was greater than or equal to the partition . Verify web-1 is still on version 0.8 by deleting it and wait for StatefulSet to restart it. kubectl delete po web-1 pod \"web-1\" deleted Wait for web-1 Pod to be Running and Ready, kubectl get po -l app=nginx -w NAME READY STATUS RESTARTS AGE web-0 1/1 Running 0 6m web-1 0/1 Terminating 0 6m web-2 1/1 Running 0 2m web-1 0/1 Terminating 0 6m web-1 0/1 Terminating 0 6m web-1 0/1 Terminating 0 6m web-1 0/1 Pending 0 0s web-1 0/1 Pending 0 0s web-1 0/1 ContainerCreating 0 0s web-1 1/1 Running 0 18s Check the image version, kubectl get po web-1 --template ' {{ range $ i , $ c := .spec.containers }}{{ $ c.image }}{{ end }} ' k8s.gcr.io/nginx-slim:0.8 web-1 was restored to original configuration because the Pod's ordinal was less than the parition. All Pods with an ordinal that is greater than or equial to the partiion will be updated when the Statefulset's .spec.template is updated. If a Pod that has an ordinal less than the partition is deleted or otherwise terminated, it will be restored to its original configuration. Phased roll outs Now that we've tesd the canary update on web-2, it's time to roll it out to all other Pods. The perform the phased roll out, update the partition to 0 . This means none of the Pods are covered under partition . $ kubectl patch statefulset web -p '{\"spec\":{\"updateStrategy\":{\"type\":\"RollingUpdate\",\"rollingUpdate\":{\"partition\":0}}}}' statefulset.apps/web patched Wait for all Pods to be come Running and Ready. kubectl get po -l app=nginx -w NAME READY STATUS RESTARTS AGE web-0 1/1 Running 0 3m web-1 0/1 ContainerCreating 0 11s web-2 1/1 Running 0 2m web-1 1/1 Running 0 18s web-0 1/1 Terminating 0 3m web-0 1/1 Terminating 0 3m web-0 0/1 Terminating 0 3m web-0 0/1 Terminating 0 3m web-0 0/1 Terminating 0 3m web-0 0/1 Terminating 0 3m web-0 0/1 Pending 0 0s web-0 0/1 Pending 0 0s web-0 0/1 ContainerCreating 0 0s web-0 1/1 Running 0 3s Check Pod's container image versions. for p in 0 1 2; do kubectl get po web-$p --template ' {{ range $ i , $ c := .spec.containers }}{{ $ c.image }}{{ end }} '; echo; done k8s.gcr.io/nginx-slim:0.7 k8s.gcr.io/nginx-slim:0.7 k8s.gcr.io/nginx-slim:0.7 Now all Pods are updated. Deleting StatefulSets StatefulSet supports both Non-Cascading and Cascading deletion. In a Non-Cascading Delete, the StatefulSet's Pods are not deleted when the StatefulSet is deleted. In a Cascading Delete, both the StatefulSet and its Pods are deleted. Non-Cascading Delete Use kubectl delete to delete the StatefulSet. Make sure to supply the --cascade=false paramter to the command. $ kubectl delete statefulset web --cascade = false statefulset.apps \"web\" deleted Get the Pods, $ kubectl get pods -l app = nginx NAME READY STATUS RESTARTS AGE web-0 1 /1 Running 0 6m web-1 1 /1 Running 0 7m web-2 1 /1 Running 0 5m All Pods are still running but they shouldn't be recreated if deleted as StatefulSet is deleted. Delete the first Pod, $ kubectl delete pod web-0 pod \"web-0\" deleted List the Pods, kubectl get pods -l app=nginx NAME READY STATUS RESTARTS AGE web-1 1/1 Running 0 10m web-2 1/1 Running 0 7m web-0 is removed for good. Now let's restart the StatefulSet, $ kubectl create -f web.yaml statefulset.apps/web created Error from server ( AlreadyExists ) : error when creating \"web.yaml\" : services \"nginx\" already exists Examp the output of the kubectl get , $ kubectl get pods -w -l app = nginx NAME READY STATUS RESTARTS AGE web-1 1 /1 Running 0 16m web-2 1 /1 Running 0 2m NAME READY STATUS RESTARTS AGE web-0 0 /1 Pending 0 0s web-0 0 /1 Pending 0 0s web-0 0 /1 ContainerCreating 0 0s web-0 1 /1 Running 0 18s web-2 1 /1 Terminating 0 3m web-2 0 /1 Terminating 0 3m web-2 0 /1 Terminating 0 3m web-2 0 /1 Terminating 0 3m The manifest requested replica of 2. web-0 was removed before, thus recreated. web-1 exists and is adopted. web-2 is beyond the replica 2 and is terminated. for i in 0 1; do kubectl exec -it web-$i -- curl localhost; done web-0 web-1 Notice the hostname in index.html still persists. Cascade delete Use the same delete command but without --cascade=false . $ kubectl delete statefulset web statefulset.apps \"web\" deleted Examp the output of kubectl get pods -w -l app=nginx , kubectl get pods -w -l app=nginx NAME READY STATUS RESTARTS AGE web-0 1/1 Running 0 11m web-1 1/1 Running 0 27m NAME READY STATUS RESTARTS AGE web-0 1/1 Terminating 0 12m web-1 1/1 Terminating 0 29m web-0 0/1 Terminating 0 12m web-0 0/1 Terminating 0 12m web-0 0/1 Terminating 0 12m web-1 0/1 Terminating 0 29m web-1 0/1 Terminating 0 29m web-1 0/1 Terminating 0 29m The Pods are deleted one at a time, with respect to the reverse order of their ordinal indices. Note that, cascading delete will delete the StatefulSet and its Pods, it will not delete the headless Service associated with the StatefulSet. We need to delete the nginx Service manually. $ kubectl delete service nginx service \"nginx\" deleted Pod management policy For some distributed systems, the StatefulSet ordering guarantees are unnecessary and/or undesierable. This can be changed using .spec.podManagementPolicy in the StatefulSet API object. OrderedReady Pod Management OrderedReady pod management is the default for StatefulSets. It tells the StatefulSet controller to respect the ordering guarantees demonstrated above. Parallel Pod Management Parallel pod management tells the StatefulSet controller to launch or terminate all Pods in parallel, and not to wait for Pods to become Running and Ready or completely terminated prior to launching or terminating another Pod. For example, apiVersion : v1 kind : Service metadata : name : nginx labels : app : nginx spec : ports : - port : 80 name : web clusterIP : None selector : app : nginx --- apiVersion : apps / v1 kind : StatefulSet metadata : name : web spec : serviceName : \"nginx\" podManagementPolicy : \"Parallel\" replicas : 2 selector : matchLabels : app : nginx template : metadata : labels : app : nginx spec : containers : - name : nginx image : k8s . gcr . io / nginx - slim : 0.8 ports : - containerPort : 80 name : web volumeMounts : - name : www mountPath : /usr/share/nginx/ html volumeClaimTemplates : - metadata : name : www spec : accessModes : [ \"ReadWriteOnce\" ] resources : requests : storage : 1 Gi","tags":"Kubernetes","url":"kubernetes-stateful-application.html","loc":"kubernetes-stateful-application.html"},{"title":"Kubernetes Stateless Application","text":"This article is a summary of the tutorial . It utilizes manifest file to create deployments and services. A stateless application doesn't save its data to hard drive, thus every time the application is restarted. It returns back to its original state. Objective This tutorial covers basic steps to setup a guest book in stateless manner. It's a guest book application with redis backend. Start up redis master. Start up redis slave. Start up guest book front end. Expose and view the Frontend service. Clean up. redis backend service Redis master Create a redis master service has 2 steps. Create redis master deployment Create redis master service based on the deployment in step 1. Create redis master deployment To create a redis master deployment, use the following manifest file, redis-master-deployment.yaml . apiVersion : apps /v1 # for versions before 1.9.0 use apps/ v1beta2 kind : Deployment metadata : name : redis - master labels : app : redis spec : selector : matchLabels : app : redis role : master tier : backend replicas : 1 template : metadata : labels : app : redis role : master tier : backend spec : containers : - name : master image : k8s . gcr . io / redis : e2e # or just image : redis resources : requests : cpu : 100 m memory : 100 Mi ports : - containerPort : 6379 In terminal, issue this command kubectl apply -f redis-master-deployment.yaml . Ensure the deployment is running. $ kubectl get pods NAME READY STATUS RESTARTS AGE redis-master-55db5f7567-wmrjk 0 /1 ContainerCreating 0 8s To view the logs of the master pod: $ kubectl logs -f redis-master-55db5f7567-wmrjk _._ _.- `` __ '' -._ _.- `` ` . ` _. '' -._ Redis 2 .8.19 ( 00000000 /0 ) 64 bit .- `` .- ``` . ``` \\/ _.,_ '' -._ ( ' , .-` | `, ) Running in stand alone mode |`-._`-...-` __...-.``-._|' ` _.- '| Port: 6379 | `-._ `._ / _.-' | PID: 1 ` -._ ` -._ ` -./ _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | http://redis.io `-._ `-._`-.__.-' _.- ' _.-' | ` -._ ` -._ ` -.__.- ' _.-' _.- '| | `-._`-._ _.-' _.- ' | `-._ `-._`-.__.-' _.- ' _.-' ` -._ ` -.__.- ' _.-' ` -._ _.- ' `-.__.-' [ 1 ] 13 Mar 20 :29:20.725 # Server started, Redis version 2.8.19 [ 1 ] 13 Mar 20 :29:20.726 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled. [ 1 ] 13 Mar 20 :29:20.726 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. [ 1 ] 13 Mar 20 :29:20.726 * The server is now ready to accept connections on port 6379 Create redis master service For other applications to communicate with redis master, we need to apply a Service to proxy the traffic to the redis master pod. Use the following manifest file, redis-master-service.yaml , to define a Service . apiVersion : v1 kind : Service metadata : name : redis - master labels : app : redis role : master tier : backend spec : ports : - port : 6379 targetPort : 6379 selector : app : redis role : master tier : backend Start the service using the apply method. kubectl apply -f redis-master-service.yaml Make sure the service is running: $ kubectl get service NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE kubernetes ClusterIP 10 .96.0.1 <none> 443 /TCP 19d redis-master ClusterIP 10 .110.130.106 <none> 6379 /TCP 5s Create redis slave deployment To create a redis slave deployment, use the following manifest file, redis-slave-deployment.yaml . apiVersion : apps /v1 # for versions before 1.9.0 use apps/ v1beta2 kind : Deployment metadata : name : redis - slave labels : app : redis spec : selector : matchLabels : app : redis role : slave tier : backend replicas : 2 template : metadata : labels : app : redis role : slave tier : backend spec : containers : - name : slave image : gcr . io /google_samples/g b - redisslave : v1 resources : requests : cpu : 100 m memory : 100 Mi env : - name : GET_HOSTS_FROM value : dns # Using ` GET_HOSTS_FROM = dns ` requires your cluster to # provide a dns service . As of Kubernetes 1.3 , DNS is a built - in # service launched automatically . However , if the cluster you are using # does not have a built - in DNS service , you can instead # access an environment variable to find the master # service 's host. To do so, comment out the ' value : dns ' line above , and # uncomment the line below : # value : env ports : - containerPort : 6379 Start up the deployment, kubectl apply -f redis-slave-deployment.yaml Check running pods, $ kubectl get pods NAME READY STATUS RESTARTS AGE redis-master-55db5f7567-wmrjk 1 /1 Running 0 23m redis-slave-584c66c5b5-ghrsz 0 /1 ContainerCreating 0 5s redis-slave-584c66c5b5-tpd4l 0 /1 ContainerCreating 0 5s Create redis slave service To open up slave deployment for other applications to communicate, we use a Service like the master deployment, redis-slave-service.yaml . apiVersion : v1 kind : Service metadata : name : redis - slave labels : app : redis role : slave tier : backend spec : ports : - port : 6379 selector : app : redis role : slave tier : backend Start the service, kubectl apply -f redis-slave-service.yaml . Check running services, $ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE kubernetes ClusterIP 10 .96.0.1 <none> 443 /TCP 19d redis-master ClusterIP 10 .110.130.106 <none> 6379 /TCP 3m redis-slave ClusterIP 10 .108.183.147 <none> 6379 /TCP 7s PHP guestbook frontend Create frontend deployment To create a deployment, use the manifest file, frontend-deployment.yaml . apiVersion : apps /v1 # for versions before 1.9.0 use apps/ v1beta2 kind : Deployment metadata : name : frontend labels : app : guestbook spec : selector : matchLabels : app : guestbook tier : frontend replicas : 3 template : metadata : labels : app : guestbook tier : frontend spec : containers : - name : php - redis image : gcr . io /google-samples/g b - frontend : v4 resources : requests : cpu : 100 m memory : 100 Mi env : - name : GET_HOSTS_FROM value : dns # Using ` GET_HOSTS_FROM = dns ` requires your cluster to # provide a dns service . As of Kubernetes 1.3 , DNS is a built - in # service launched automatically . However , if the cluster you are using # does not have a built - in DNS service , you can instead # access an environment variable to find the master # service 's host. To do so, comment out the ' value : dns ' line above , and # uncomment the line below : # value : env ports : - containerPort : 80 Start the deployment, kubectl apply -f frontend-deployment.yaml Quest the list of pods to verify the frontend replicas are running: $ kubectl get pods -l app = guestbook -l tier = frontend NAME READY STATUS RESTARTS AGE frontend-5c548f4769-bsjjv 0 /1 ContainerCreating 0 9s frontend-5c548f4769-mjq4h 0 /1 ContainerCreating 0 9s frontend-5c548f4769-sljfb 0 /1 ContainerCreating 0 9s Create frontend service The redis-slave and redis-master services are only accessible within the container cluster because default type for a service is CluterIP. ClusterIP provides a single IP address for the set of Pods the Service is pointing to. This IP address is accessible only within the cluster. To allow guests to be able to access the guestbook, we need to configure the frontend service to the external internet. This is achived through type: NodePort or type: LoadBalancer . We use LoadBalancer here as an example. frontend-service.yaml . apiVersion : v1 kind : Service metadata : name : frontend labels : app : guestbook tier : frontend spec : # comment or delete the following line if you want to use a LoadBalancer # type: NodePort # if your cluster supports it, uncomment the following to automatically create # an external load-balanced IP for the frontend service. type : LoadBalancer ports : - port : 80 selector : app : guestbook tier : frontend Start a the service, kubectl apply -f frontend-service.yaml List running services to verify, $ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE frontend LoadBalancer 10 .100.241.58 localhost 80 :31546/TCP 32s kubernetes ClusterIP 10 .96.0.1 <none> 443 /TCP 19d redis-master ClusterIP 10 .110.130.106 <none> 6379 /TCP 6m redis-slave ClusterIP 10 .108.183.147 <none> 6379 /TCP 3m View the front end To view the frontend, go to localhost:80 on the browser and the frontend website should show up. Scale the web frontend Run the following command to scale up the number of frontend Pods, kubectl scale deployment frontend --replicas=5 Query the list of Pods to verify the number of frontend Pods running, $ kubectl get pods NAME READY STATUS RESTARTS AGE frontend-3823415956-70qj5 1 /1 Running 0 5s frontend-3823415956-dsvc5 1 /1 Running 0 54m frontend-3823415956-k22zn 1 /1 Running 0 54m frontend-3823415956-w9gbt 1 /1 Running 0 54m frontend-3823415956-x2pld 1 /1 Running 0 5s redis-master-1068406935-3lswp 1 /1 Running 0 56m redis-slave-2005841000-fpvqc 1 /1 Running 0 55m redis-slave-2005841000-phfv9 1 /1 Running 0 55m To scale down the number of frontend Pods: kubectl scale deployment frontend --replicas=2 To verify, $ kubectl get pods NAME READY STATUS RESTARTS AGE frontend-3823415956-k22zn 1 /1 Running 0 1h frontend-3823415956-w9gbt 1 /1 Running 0 1h redis-master-1068406935-3lswp 1 /1 Running 0 1h redis-slave-2005841000-fpvqc 1 /1 Running 0 1h redis-slave-2005841000-phfv9 1 /1 Running 0 1h Clean up Run the following commands to delete all Pods, Deployments and Services, $ kubectl delete deployment -l app = redis deployment.extensions \"redis-master\" deleted deployment.extensions \"redis-slave\" deleted $ kubectl delete service -l app = redis service \"redis-master\" deleted service \"redis-slave\" deleted $ kubectl delete deployment -l app = guestbook deployment.extensions \"frontend\" deleted $ kubectl delete service -l app = guestbook service \"frontend\" deleted Query the list of Pods to verify all pods are terminated, $ kubectl get pods No resources found.","tags":"Kubernetes","url":"kubernetes-stateless-application.html","loc":"kubernetes-stateless-application.html"},{"title":"Kubernetes Workflow","text":"This article summarizes the basic workflow when working with a kubernetes cluster Basic deployment Run a node To run the node using a an image, run this command kubectl run hello - world -- replicas = 5 -- labels = \"run=load-balancer-example\" -- image = gcr . io / google - samples / node - hello : 1.0 -- port = 8080 This will create a hello-world Deployment object with 5 replicas. Display information about the Deployment . kubectl get deployments hello-world kubectl describe deployments hello-world Use a service to expose the deployment Create a service to expose the Deployment : kubectl expose deployment hello-world --type=LoadBalancer --name=my-service This will create a LoadBalance service that manages the hello-world replicas and expose port 8080 to outside world. kubectl get services my-service NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE my-service ClusterIP 10.3.245.137 104.198.205.71 8080/TCP 54s Try access the service from outside using. curl http://<external-ip>:<port> Hello Kubernetes! Scale deployment To change the number of replicas in the deployment object. use this command: $ kubectl scale deployments/hello-world --replicas = 8 deployment.extensions \"hello-world\" scaled $ kubectl get deployments NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE hello-world 8 8 8 8 15m $ kubectl get pods NAME READY STATUS RESTARTS AGE hello-world-5b446dd74b-72jp4 1 /1 Running 0 16m hello-world-5b446dd74b-7xh77 1 /1 Running 0 9s hello-world-5b446dd74b-87hlb 1 /1 Running 0 16m hello-world-5b446dd74b-c4q4t 1 /1 Running 0 9s hello-world-5b446dd74b-jzp9d 1 /1 Running 0 16m hello-world-5b446dd74b-plvrp 1 /1 Running 0 9s hello-world-5b446dd74b-pxg2w 1 /1 Running 0 16m hello-world-5b446dd74b-vrm4r 1 /1 Running 0 16m hello-world is the pod we are running and it's a Deployment , hence deployments/hello-world Delete service and deployment To delete the Service, enter this command: kubectl delete services my-service To delete the Deployment, the ReplicaSet, and the Pods that are running the Hello World application, enter this command: kubectl delete deployment hello-world","tags":"Kubernetes","url":"kubernetes-workflow.html","loc":"kubernetes-workflow.html"},{"title":"Kubernetes Basics","text":"This article covers some basic commands and instructions to deploy a kubernetes app. Some notes and images are taken from https://kubernetes.io/docs/tutorials . Basic concept Nodes A kubernetes cluster is consist of Nodes . A node can be a VM or a physical machine. To check current nodes issue this command: $ kubectl get nodes NAME STATUS ROLES AGE VERSION docker-for-desktop Ready master 30m v1.10.11 Each cluster should have one master node with a 0 or a few slave nodes. Pods A node is consists of one or more Pods . To get list of running pods, issue this command: $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5c69669756-rmxrn 1 /1 Running 0 45m A Pod is a Kubernetes abstraction that represents a group of one or more application containers (such as Docker or rkt), and some shared resources for those containers. Those resources include: Shared storage, as Volumes Networking, as a unique cluster IP address Information about how to run each container, such as the container image version or specific ports to use Services A Service in Kubernetes is an abstraction which defines a logical set of Pods and a policy by which to access them. Services enable a loose coupling between dependent Pods. A Service is defined using YAML (preferred) or JSON, like all Kubernetes objects. A Service routes traffic across a set of Pods. Services are the abstraction that allow pods to die and replicate in Kubernetes without impacting your application. Discovery and routing among dependent Pods (such as the frontend and backend components in an application) is handled by Kubernetes Services. Services match a set of Pods using labels and selectors, a grouping primitive that allows logical operation on objects in Kubernetes. Labels are key/value pairs attached to objects and can be used in any number of ways: Designate objects for development, test, and production Embed version tags Classify an object using tags Networking Pods running in side Kubernetes are running on a prviate, isolated network. By default, they are visible from other pods and services within the same cluster, but not outside. To quickly open on communication to outside world, kubectl can create a proxy to foward communications, kubectl proxy will create a proxy at http://localhost:8001/version . The API server will automatically create an endpoint for each pod, based on the pod name, that is also accessible through the proxy. To access each individual pod, we need to get pod name. export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{\"\\n\"}}{{end}}') . Then we can make a HTTP request to the application in that pod. curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/ Tutorial Make an deployment Run this commmand to make a new deployment. kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080 Get the name of running pod, export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{\"\\n\"}}{{end}}') . Check application configuration Let's verify that the application we deployed in the previous scenario is running. We'll use the kubectl get command and look for existing Pods: $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5c69669756-rmxrn 1 /1 Running 0 1h Next, to view what containers are inside that Pod and what images are used to build those containers we run the describe pods command: kubectl describe pods . View container logs Anything that the application would normally send to STDOUT becomes logs for the container within the Pod. We can retrieve these logs using the kubectl logs command: kubectl logs $POD_NAME Note: We don't need to specify the container name, because we only have one container inside the pod. Executing command on the container We can execute commands directly on the container once the Pod is up and running. For this, we use the exec command and use the name of the Pod as a parameter. Let's list the environment variables: $ kubectl exec $POD_NAME env PATH = /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME = kubernetes-bootcamp-5c69669756-rmxrn KUBERNETES_PORT = tcp://10.96.0.1:443 KUBERNETES_PORT_443_TCP = tcp://10.96.0.1:443 KUBERNETES_PORT_443_TCP_PROTO = tcp KUBERNETES_PORT_443_TCP_PORT = 443 KUBERNETES_PORT_443_TCP_ADDR = 10 .96.0.1 KUBERNETES_SERVICE_HOST = 10 .96.0.1 KUBERNETES_SERVICE_PORT = 443 KUBERNETES_SERVICE_PORT_HTTPS = 443 NPM_CONFIG_LOGLEVEL = info NODE_VERSION = 6 .3.1 HOME = /root Again, worth mentioning that the name of the container itself can be omitted since we only have a single container in the Pod. Next let's start a bash session in the Pod's container: kubectl exec -ti $POD_NAME bash . We have now an open console on the container. To close the console, use exit . Create a new service To list current services in the cluster: $ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE kubernetes ClusterIP 10 .96.0.1 <none> 443 /TCP 1h Cluter services is created by default. To create a new service using running pods: kubectl expose deployment/kubernetes-bootcamp --type=\"NodePort\" --port 8080 List services again: $ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE kubernetes ClusterIP 10 .96.0.1 <none> 443 /TCP 1h kubernetes-bootcamp NodePort 10 .104.156.85 <none> 8080 :30527/TCP 2s Notice that the new service kubernetes-bootcamp has a unique cluster-IP 10.104.156.85 , an internal port 30527 and an external port 8080 . Try access the end point with curl 10.104.156.85:8080 . Using labels The Deployment created automatically a label for our Pod. With describe deployment command you can see the name of the label: kubectl describe deployment . This label can be used to query list of Pods: $ kubectl get pods -l run = kubernetes-bootcamp NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5c69669756-rmxrn 1 /1 Running 0 1h The same can be used on services: $ kubectl get services -l run = kubernetes-bootcamp NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE kubernetes-bootcamp NodePort 10 .104.156.85 <none> 8080 :30527/TCP 24m Get name of the pod: export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{\"\\n\"}}{{end}}') Apply a new label to this pod: kubectl label pod $POD_NAME app=v1 And check the pod description: $ kubectl describe pods $ POD_NAME ` Name : kubernetes - bootcamp - 5 c69669756 - rmxrn Namespace : default Node : docker - for - desktop / 192.168 . 65.3 Start Time : Thu , 21 Feb 2019 14 : 51 : 05 - 0700 Labels : app = v1 pod - template - hash = 1725225312 run = kubernetes - bootcamp ... This label can be used to query pods: $ kubectl get pods -l app = v1 NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5c69669756-rmxrn 1 /1 Running 0 1h Delete a service To delete a service, use this command kubectl delete service -l run=kubernetes-bootcamp Confirm the service is gone: $ kubectl get services NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE kubernetes ClusterIP 10 .96.0.1 <none> 443 /TCP 2h But the pod should still be running: $ kubectl exec -ti $POD_NAME curl localhost:8080 Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-5c69669756-rmxrn | v = 1 Scaling a service Scaling is achieved through number of replica in a deployment. Kubernetes also support auto scaling but it's not covered in this part of the tutorial. Running multiple instances of an application will require a way to distribute the traffic to all of them. Services have an integrated load-balancer that will distribute network traffic to all Pods of an exposed Deployment. Services will monitor continuously the running Pods using endpoints, to ensure the traffic is sent only to available Pods. Once you have multiple instances of an Application running, you would be able to do Rolling updates without downtime. To scale an existing service, use the following commands. List running deployments: $ kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE kubernetes-bootcamp 1 /1 1 1 37s The DESIRED state is showing the configured number of replicas. The CURRENT state show how many replicas are running now. The UP-TO-DATE is the number of replicas that were updated to match the desired (configured) state. To scale the deployments to replica of 4: $ kubectl scale deployments/kubernetes-bootcamp --replicas = 4 deployment.apps/kubernetes-bootcamp scaled $ kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE kubernetes-bootcamp 4 /4 4 4 100s We can see the available instances and ready instances are now four. Check if number of pods changed: $ kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES kubernetes-bootcamp-6bf84cb898-4jx92 1 /1 Running 0 8s 172 .18.0.7 minikube <none> <none> kubernetes-bootcamp-6bf84cb898-mm2g5 1 /1 Running 0 8s 172 .18.0.5 minikube <none> <none> kubernetes-bootcamp-6bf84cb898-rsml8 1 /1 Running 0 8s 172 .18.0.3 minikube <none> <none> kubernetes-bootcamp-6bf84cb898-wfvkt 1 /1 Running 0 8s 172 .18.0.6 minikube <none> <none> There are 4 pods with different IP now. The changes should also register with deployments. $ kubectl describe deployments / kubernetes - bootcamp Name : kubernetes - bootcamp Namespace : default CreationTimestamp : Sat , 23 Feb 2019 17 : 38 : 57 + 0000 Labels : run = kubernetes - bootcamp Annotations : deployment . kubernetes . io / revision : 1 Selector : run = kubernetes - bootcamp Replicas : 4 desired | 4 updated | 4 total | 4 available | 0 unavailable StrategyType : RollingUpdate MinReadySeconds : 0 RollingUpdateStrategy : 25 % max unavailable , 25 % max surge Pod Template : Labels : run = kubernetes - bootcamp Containers : kubernetes - bootcamp : Image : gcr . io / google - samples / kubernetes - bootcamp : v1 Port : 8080 / TCP Host Port : 0 / TCP Environment : < none > Mounts : < none > Volumes : < none > Conditions : Type Status Reason ---- ------ ------ Available True MinimumReplicasAvailable Progressing True NewReplicaSetAvailable OldReplicaSets : < none > NewReplicaSet : kubernetes - bootcamp - 6 bf84cb898 ( 4 / 4 replicas created ) Events : Type Reason Age From Message ---- ------ ---- ---- ------- Normal ScalingReplicaSet 73s deployment - controller Scaled up replicaset kubernetes - bootcamp - 6 bf84cb898 to 4 Load balancing With replica enabled, load balancing should also automatically enable for this service. $ kubectl describe services / kubernetes - bootcamp Name : kubernetes - bootcamp Namespace : default Labels : run = kubernetes - bootcamp Annotations : < none > Selector : run = kubernetes - bootcamp Type : NodePort IP : 10.97 . 18.242 Port : < unset > 8080 / TCP TargetPort : 8080 / TCP NodePort : < unset > 32111 / TCP Endpoints : 172.18 . 0.3 : 8080 , 172.18 . 0.5 : 8080 , 172.18 . 0.6 : 8080 + 1 more ... Session Affinity : None External Traffic Policy : Cluster Events : < none > There are 4 endpoints on this services, each one is one our the replica. To verify the load balancing is working. Let's make request to this service and each time we should be hitting different pods. $ export NODE_PORT = $( kubectl get services/kubernetes-bootcamp -o go-template = '{{(index .spec.ports 0).nodePort}}' ) $ echo NODE_PORT = $NODE_PORT NODE_PORT = 32111 $ curl $( minikube ip ) : $NODE_PORT Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-6bf84cb898-rsml8 | v = 1 $ curl $( minikube ip ) : $NODE_PORT Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-6bf84cb898-4jx92 | v = 1 $ curl $( minikube ip ) : $NODE_PORT Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-6bf84cb898-wfvkt | v = 1 As we can see in the curl printout. Each time we hit a different pod. Scale down To scale down the service, issue the same scale command but with a smaller replica number. $ kubectl scale deployments/kubernetes-bootcamp --replicas = 2 deployment.extensions/kubernetes-bootcamp scaled $ kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE kubernetes-bootcamp 2 /2 2 2 6m26s $ kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES kubernetes-bootcamp-6bf84cb898-4jx92 1 /1 Terminating 0 6m18s 172 .18.0.7 minikube <none> <none> kubernetes-bootcamp-6bf84cb898-mm2g5 1 /1 Running 0 6m18s 172 .18.0.5 minikube <none> <none> kubernetes-bootcamp-6bf84cb898-rsml8 1 /1 Running 0 6m18s 172 .18.0.3 minikube <none> <none> kubernetes-bootcamp-6bf84cb898-wfvkt 1 /1 Terminating 0 6m18s 172 .18.0.6 minikube <none> <none> This confirms that 2 pods are terminating. Rolling updates Rolling updates allow Deployments' update to take place with zero downtime by incrementally updating Pods instances with new ones. The new Pods will be scheduled on Nodes with available resources. By default, the maximum number of Pods that can be unavailable during the update and the maximum number of new Pods that can be created, is one. Both options can be configured to either numbers or percentages (of Pods). In Kubernetes, updates are versioned and any Deployments update can be rolled back to previous (stable) version. Similar to application Scaling, if a Deployment is exposed publicly, the Service will load-balance the traffic only to available Pods during the update. An available Pod is an instance that is available to the users of the application. Rolling updates allow the following actions: Promote an application from one environment to another (via container image updates) Rollback to previous versions Continuous Integration and Continuous Delivery of applications with zero downtime To roll out an update, follow these steps: List running deployments: $ kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE kubernetes-bootcamp 4 /4 4 4 24s List running pods: $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-6bf84cb898-dg8zx 1 /1 Running 0 25s kubernetes-bootcamp-6bf84cb898-fzb22 1 /1 Running 0 25s kubernetes-bootcamp-6bf84cb898-mfq7l 1 /1 Running 0 25s kubernetes-bootcamp-6bf84cb898-r8snq 1 /1 Running 0 25s To update the image of the application to version 2, use the set image command, followed by the deployment name and the new image version: $ kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp = jocatalin/kubernetes-bootcamp:v2 deployment.apps/kubernetes-bootcamp image updated The command notified the Deployment to use a different image for your app and initiated a rolling update. Check the status of the new Pods, and view the old one terminating with the get pods command: $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5bf4d5689b-4xkmn 1 /1 Running 0 10s kubernetes-bootcamp-5bf4d5689b-hv6qr 1 /1 Running 0 10s kubernetes-bootcamp-5bf4d5689b-jm57j 1 /1 Running 0 13s kubernetes-bootcamp-5bf4d5689b-qvgkz 1 /1 Running 0 13s kubernetes-bootcamp-6bf84cb898-dg8zx 1 /1 Terminating 0 83s kubernetes-bootcamp-6bf84cb898-fzb22 1 /1 Terminating 0 83s kubernetes-bootcamp-6bf84cb898-mfq7l 1 /1 Terminating 0 83s kubernetes-bootcamp-6bf84cb898-r8snq 1 /1 Terminating 0 83s $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5bf4d5689b-4xkmn 1 /1 Running 0 43s kubernetes-bootcamp-5bf4d5689b-hv6qr 1 /1 Running 0 43s kubernetes-bootcamp-5bf4d5689b-jm57j 1 /1 Running 0 46s kubernetes-bootcamp-5bf4d5689b-qvgkz 1 /1 Running 0 46s Old instances are replaced with updated instances eventually. The update can be confirmed also by running a rollout status command: $ kubectl rollout status deployments/kubernetes-bootcamp deployment \"kubernetes-bootcamp\" successfully rolled out To view the current image version of the app, run a describe command against the Pods: kubectl describe pods To roll back an update, let's deploy an update with problems: kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=gcr.io/google-samples/kubernetes-bootcamp:v10 And check status: $ kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE kubernetes-bootcamp 3 /4 2 3 5m29s $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-597cfc5b76-cxccd 0 /1 ImagePullBackOff 0 69s kubernetes-bootcamp-597cfc5b76-h6r48 0 /1 ErrImagePull 0 69s kubernetes-bootcamp-5bf4d5689b-4xkmn 1 /1 Running 0 4m9s kubernetes-bootcamp-5bf4d5689b-jm57j 1 /1 Running 0 4m12s kubernetes-bootcamp-5bf4d5689b-qvgkz 1 /1 Running 0 4m12s Something is wrong with the updated images. To get more insights, use the describe command: kubectl describe pods To roll back the update, issue this command: $ kubectl rollout undo deployments/kubernetes-bootcamp deployment.apps/kubernetes-bootcamp rolled back And we are back to old state: $ kubectl get pods NAME READY STATUS RESTARTS AGE kubernetes-bootcamp-5bf4d5689b-4xkmn 1 /1 Running 0 5m41s kubernetes-bootcamp-5bf4d5689b-j6kp4 1 /1 Running 0 21s kubernetes-bootcamp-5bf4d5689b-jm57j 1 /1 Running 0 5m44s kubernetes-bootcamp-5bf4d5689b-qvgkz 1 /1 Running 0 5m44s Kubernetes Commands check current version: kubectl version get cluster info: kubectl cluster-info list nodes: kubectl get nodes list pods: kubectl get pods describe pods: kubectl describe pods run a deployment: kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080 list deployments: kubectl get deployments","tags":"Kubernetes","url":"kubernetes-basics.html","loc":"kubernetes-basics.html"},{"title":"Non-transparent proxy with Squid and Docker","text":"We are looking to create a non-transparent proxy server using Squid for networking sniffing. The end product should be able to sniff both HTTP and HTTPS traffic. Transparent proxy server vs non-transparent proxy server Both types proxy servers are able to relay traffic from client machine. Transparent proxy is the easier setup. It allows quick access to the web for everyone without configuration from client side. The down side of a transparent proxy is that it provides limited function to perform network traffic monitoring and filtering. Only HTTP traffic can be monitored. A non-transparent proxy on the other hand, provides a much more powerful and flexible proxying service. It can relay HTTPS traffic as a man-in-the-middle proxy by forging its own SSL certificate. However, in order to achieve this, server's CA certificate must be installed and trusted as a root certificate on client's machine. In this project, we will explorer setting up a non-transparent proxy server using squid and containerize it into a docker. This container can later be used with an ICAP service to perform network traffic filtering in the future. Squid docker A popular proxy software, link . The Dockerfile is created and the content is as followed. FROM ubuntu : 18.04 ENV SQUID_VERSION = 3.5 . 27 \\ SQUID_DIR =/ usr / local / squid \\ SQUID_USER = proxy RUN apt - get update RUN apt - get install build - essential openssl libssl1 . 0 - dev wget - y WORKDIR / tmp RUN wget http : // www . squid - cache . org / Versions / v3 / 3.5 / squid -$ { SQUID_VERSION } . tar . gz RUN tar - xzf squid -$ { SQUID_VERSION } . tar . gz WORKDIR / tmp / squid -$ { SQUID_VERSION } RUN chmod + x configure RUN ./ configure \\ -- datadir =/ usr / share / squid \\ -- sysconfdir =/ etc / squid \\ -- libexecdir =/ usr / lib / squid \\ -- with - pidfile =/ var / run / squid . pid \\ -- with - filedescriptors = 65536 \\ -- with - large - files \\ -- enable - delay - pools \\ -- enable - cache - digests \\ -- enable - icap - client \\ -- enable - ssl \\ -- enable - ssl - crtd \\ -- with - openssl \\ -- enable - follow - x - forwarded - for \\ -- with - default - user =$ { SQUID_USER } RUN make RUN make install ENV PATH =$ PATH : / usr / local / squid / sbin RUN / usr / lib / squid / ssl_crtd - c - s / var / lib / ssl_db # SSL certificate database directory RUN mkdir - p $ { SQUID_DIR } RUN chmod - R 755 $ { SQUID_DIR } RUN chown - R $ { SQUID_USER }: $ { SQUID_USER } $ { SQUID_DIR } RUN chown - R $ { SQUID_USER }: $ { SQUID_USER } / usr / lib / squid / ssl_crtd EXPOSE 3128 / tcp In addition to the Dockerfile , there are 5 more files that are important. / usr / local / squid / var / cache # cache / usr / local / squid / var / logs # logs / etc / squid / squid . conf # squid configuration file / usr / local / squid / ca . crt # ssl certificate / usr / local / squid / ca . key # ssl private key These files will be mapped to the host system in docker-compose.yml file. ca.crt and ca.key are our server SSL certificate and keys. They can be generated using this script. 1 2 3 4 5 #!/bin/sh openssl genrsa -out ca.key 2048 openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/CN=XXXXX CA\" openssl genrsa -out cert.key 2048 Replace XXXXX with the name at your choice. squid.conf is squid configuration file. Here is an example #defaults acl localnet src 10.0 . 0.0 / 8 acl localnet src 172.16 . 0.0 / 12 acl localnet src 192.168 . 0.0 / 16 acl localnet src fc00 :: / 7 acl localnet src fe80 :: / 10 acl SSL_ports port 443 acl Safe_ports port 80 acl Safe_ports port 21 acl Safe_ports port 443 acl Safe_ports port 70 acl Safe_ports port 210 acl Safe_ports port 1025 - 65535 acl Safe_ports port 280 acl Safe_ports port 488 acl Safe_ports port 591 acl Safe_ports port 777 acl CONNECT method CONNECT http_access allow manager localhost http_access deny manager http_access deny ! Safe_ports http_access deny CONNECT ! SSL_ports http_access allow localnet http_access allow localhost # allow traffic from localhost # to allow other client IP, set them up above http_access deny all # # INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS # cache_effective_user proxy cache_effective_group proxy # this work for both http and https traffic http_port 3128 ssl - bump generate - host - certificates = on \\ dynamic_cert_mem_cache_size = 4 MB \\ cert =/ usr / local / squid / ca . crt \\ key =/ usr / local / squid / ca . key #always_direct allow all ssl_bump server - first all #sslproxy_cert_error deny all sslproxy_flags DONT_VERIFY_PEER sslcrtd_program / usr / lib / squid / ssl_crtd - s / var / lib / ssl_db - M 4 MB sslcrtd_children 8 startup = 1 idle = 1 # icap filtering service icap_enable on icap_preview_enable on # request filtering, set bypass to 0 to enforce icap_service service_req reqmod_precache bypass = 1 icap : // icap : 1344 adaptation_access service_req allow all # response filtering, set bypass to 0 to enforce icap_service service_resp respmod_precache bypass = 1 icap : // icap : 1344 adaptation_access service_resp allow all # # Add any of your own refresh_pattern entries above these. # refresh_pattern &#94; ftp : 1440 20 % 10080 refresh_pattern &#94; gopher : 1440 0 % 1440 refresh_pattern - i ( / cgi - bin /| \\ ? ) 0 0 % 0 refresh_pattern . 0 20 % 4320 shutdown_lifetime 1 second At last, the docker-compose.yml that puts everything together. version : '3' services : squid : build : ./ ports : - \"8888:3128\" volumes : - ./ cache : / usr / local / squid / var / cache - ./ logs : / usr / local / squid / var / logs - ./ squid . conf : / etc / squid / squid . conf - ./ ca . crt : / usr / local / squid / ca . crt - ./ ca . key : / usr / local / squid / ca . key restart : always command : squid - f / etc / squid / squid . conf - NYCd 1 The folder structure should look like this: squid/ ca.crt ca.key cert.key docker-compose.yml Dockerfile squid.conf cache/ logs/ Start the squid docker by running docker-compose up . Docker should start building the docker image. At the very end, the console should have a print out like this. Creating squid_squid_1 ... done Attaching to squid_squid_1 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Current Directory is / tmp / squid - 3.5 . 27 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Starting Squid Cache version 3.5 . 27 for x86_64 - pc - linux - gnu ... squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Service Name : squid squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Process ID 1 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Process Roles : master worker squid_1 | 2018 / 09 / 01 02 : 33 : 39 | With 1048576 file descriptors available squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Initializing IP Cache ... squid_1 | 2018 / 09 / 01 02 : 33 : 39 | DNS Socket created at [::], FD 9 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | DNS Socket created at 0.0 . 0.0 , FD 10 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Adding nameserver 127.0 . 0.11 from / etc / resolv . conf squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Adding ndots 1 from / etc / resolv . conf squid_1 | 2018 / 09 / 01 02 : 33 : 39 | helperOpenServers : Starting 1 / 8 'ssl_crtd' processes squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Logfile : opening log daemon : / usr / local / squid / var / logs / access . log squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Logfile Daemon : opening log / usr / local / squid / var / logs / access . log squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Local cache digest enabled ; rebuild / rewrite every 3600 / 3600 sec squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Store logging disabled squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Swap maxSize 0 + 262144 KB , estimated 20164 objects squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Target number of buckets : 1008 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Using 8192 Store buckets squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Max Mem size : 262144 KB squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Max Swap size : 0 KB squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Using Least Load store dir selection squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Current Directory is / tmp / squid - 3.5 . 27 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Finished loading MIME types and icons . squid_1 | 2018 / 09 / 01 02 : 33 : 39 | HTCP Disabled . squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Squid plugin modules loaded : 0 squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Adaptation support is on squid_1 | 2018 / 09 / 01 02 : 33 : 39 | Accepting SSL bumped HTTP Socket connections at local = [::]: 3128 remote = [::] FD 16 flags = 9 squid_1 | 2018 / 09 / 01 02 : 33 : 40 | storeLateRelease : released 0 objects Client setup On client machine, install the server certificate ca.crt as Trusted Root Certification Authorities, refer to Windows and Linux , and Mac . Configure the proxy setting on your machine to ip localhost and port 8888 . If the client is on a different machine, you need to open port 8888 on the server side and configure client to the server's ip and port 8888 . Once everything configured, go to google.ca and check its SSL certificate, the certificate should say its issued by XXXXX instead of Google. But all certificate encryption and signature should be valid as we have trusted our own CA certificate on the client machine.","tags":"Networking","url":"non-transparent-proxy-with-squid-and-docker.html","loc":"non-transparent-proxy-with-squid-and-docker.html"},{"title":"Compile tcpdump for android.","text":"There are many ways to sniff network traffic on android, VPN, proxy and etc. Today we are gonna look into using compiling tcpdump for Android which can be used with netcat to sniff network traffic later. The Linux binaries We will be using two Linux binaries to achive this, tcpdump and netcat. Tcpdump is a popular tool in Linux to capture net traffic. Netcat is another Linux binary that are commonly used to listen on a socket. We will be using these two binaries along with Java coded android apps to demonstrate the technique. A Rooted Android Phone First thing first, this technique requires a rooted android phone. If your phone is not rooted, check out some posts and root your device first. Compile Tcpdump and Netcat Binaries for Android Like any other binaries written in C, we need to compile them differerntly if we want to run them on differernt platforms. Let's start by installing our android compiler, assuming we are compiling for arm processor architecture. Execute the following command in your Ubuntu shell. sudo apt-get install gcc-arm-linux-gnueabi sudo apt-get install byacc sudo apt-get install flex This will install gcc for arm architectre and other support tools for compiling. Next, create a folder named \"compile_for_android\", this is where we will be performing all the compiling. mkdir compile_for_android cd compile_for_android Now let's download tcpdump source code. wget http://www.tcpdump.org/release/tcpdump-4.8.1.tar.gz Tcpdump depends on libpcap, so we need to download and compile libpcap source code as well. wget http://www.tcpdump.org/release/libpcap-1.8.1.tar.gz Extract these two packages. tar zxvf tcpdump-4.8.1.tar.gz tar zxvf libpcap-1.8.1.tar.gz Now we are ready to compile our tcpdump. First, let's make sure our compiler is the android compiler. export CC = arm-linux-gnueabi-gcc Compiler libpcap first. cd libpcap-1.8.1 ./configure --host = arm-linux --with-pcap = linux make This should compiler the libpcap library for us. Now let's go to our tcpdump directory. cd .. cd tcpdump-4.8.1 Before we perform the same thing above, there is a few things we need to do. Figure out what major version our Ubuntu we have, uname -a This will give out something like this. 4 .2.0-42-generic In this case, our major version is 4 and we set a variable in command. export ac_cs_linux_vers = 4 Set the following variables to make our binary self contained (ie. not reliant on other libraries). export CFLAGS = -static export CPPFLAGS = -static export LDFLAGS = -static And configure the directory, ./configure --host = arm-linux --disable-ipv6 And then make it, make Strip the symbol information to make binary smaller. These symbols are only useful in debugging the application. arm-linux-gnueabi-strip tcpdump","tags":"Android","url":"compile-tcpdump-for-android.html","loc":"compile-tcpdump-for-android.html"},{"title":"Setup Jenkins with Django for Continous Deployment","text":"About Jenkins Jenkins is a tool that is widely used for continous integration/deployment. It's basically a tool to automate the process of writing code, running tests and deploy for production. We will be using this post to demonstrate the setup using a \"hello world\" Django web application. The web application will be served using apache. However, the setup can be used with any web development language and framework. The Setup Our development code will be sitting at ~/django_hello_world. For simplicity, the source code will be pushed to a git repository that is sitting on the same machine at /webapp_repo. It can be on other machine through a ssh tunnel. The production code, which is also our live code, will be sitting at /webapps/django_hello_world Django Hello World First thing first, we need to setup an web application first. This will be a similar version of the official Django tutorial, https://docs.djangoproject.com/en/1.10/intro/tutorial01/ . Start the Django project: cd ~/django_hello_world django-admin startproject hello_world Under the same directory, create an app called polls: python manage.py startapp polls This will create a folder called polls. Under polls, open up the file called views and put the following code: from django.http import HttpResponse def index ( request ): return HttpResponse ( \"Hello, world. You're at the polls index.\" ) In the same polls folder, create a file named \"urls.py\" which will define the urls. In the urls file, enter the following code: from django.conf.urls import url from . import views urlpatterns = [ url ( r '&#94;$' , views . index , name = 'index' ), ] Now let's link this url file to the global url file. Open up the urls.py file under hello world folder and put in the following code: from django.conf.urls import url , include from django.contrib import admin urlpatterns = [ url ( r '&#94;polls/' , include ( 'polls.urls' )), url ( r '&#94;admin/' , admin . site . urls ), ] And that's it! Go back to project root directory: cd ~/django_hello_world And run this command: python manage.py runserver Open up http://localhost:8000/polls/ in the browser and we should see the text \"Hello, world. You're at the polls index.\" Remember this only runs our web application under local host, and only we can see it. In order for other people to see it, we need to use apache to serve it. Serve Django with Apache Django's tutorial website has a thorough documentation on the setup, https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/modwsgi/ . We will briefly mention it here. Using mod_wsgi daemon mode is the recommended way to serve our application. Assuming we have apache and mod_wsgi installed. First of all, let's create a directory to store our production files where Jenkins will be publishing to. cd / mkdir /webapps/hello_world Our production code will be sitting under this directory, hello_world/ hello_world/ polls/ ... Under apache's enabled site directory, let's create a conf file for our web application. cd /etc/apache2/sites-enabled touch hello_world.conf In hello_world.conf, enter the following contents, Listen 8888 <VirtualHost *:8888> # The ServerName directive sets the request scheme, hostname and port that # the server uses to identify itself. This is used when creating # redirection URLs. In the context of virtual hosts, the ServerName # specifies what hostname must appear in the request's Host: header to # match this virtual host. For the default virtual host (this file) this # value is not decisive as it is used as a last resort host regardless. # However, you must set it for any further virtual host explicitly. #ServerName www.example.com # ServerAdmin webmaster@localhost # DocumentRoot /var/www/html # Available loglevels: trace8, ..., trace1, debug, info, notice, warn, # error, crit, alert, emerg. # It is also possible to configure the loglevel for particular # modules, e.g. # LogLevel info ssl:warn WSGIScriptAlias / /webapps/hello_world/hello_world/wsgi.py WSGIDaemonProcess helloworld.com python-path = /django_hello_world WSGIProcessGroup helloworld.com <Directory> /webapps/hello_world/hello_world> <Files wsgi.py> Require all granted </Files> </Directory> ErrorLog ${ APACHE_LOG_DIR } /error.log CustomLog ${ APACHE_LOG_DIR } /access.log combined # For most configuration files from conf-available/, which are # enabled or disabled at a global level, it is possible to # include a line for only one particular virtual host. For example the # following line enables the CGI configuration for this host only # after it has been globally disabled with \"a2disconf\". #Include conf-available/serve-cgi-bin.conf </VirtualHost> This document tells apache about configurations of our site. Apache will be listening on port 8888 and our site should be accessible on port 8888 at all IP addresses. There is a wsgi.py file we need to create for apache to load the Django application. Go back to our development directory, cd ~/django_hello_world/hello_world cd hello_world touch wsgi.py The file structure should look like this, hello_world/ hello_world/ wsgi.py ... polls/ ... In wsgi.py, enter the following content, import os from django.core.wsgi import get_wsgi_application os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"hello_world.settings\" ) application = get_wsgi_application () And that's it, we are set for apache. Now let's get our code into our production directory. Setup Git Repository Next setup is to setup the git repository and pull code to our production directory. For simplicity, we will setup the git repository as a local directory on our machine. cd / mkdir git_repo cd git_repo git init --bare hello_world.git This will setup a local git repository under /git_repo called hello_world.git. Next, let setup our development code to track this directory and push our code to it. cd /django_hello_world/hello_world git remote add origin /git_repo/hello_world.git Make our first commit by typing, git status git add --all git commit -a Type in our first commit message and finish the commit. Next let's push our first commit to git repository, git push -u origin master This will push our commit to remote called origin and setup our local master to track the remote master branch. Next let's pull our code into our production directory. cd /webapps git clone /git_repo/hello_world.git Our lastest code should show up in the webapps directory. This is also where apache will be accessing our site code. Restart apache server, sudo systemctl restart apache2 Now, we should be able to see the site under 8888 port, try localhost:8888 or 127.0.0.1:8888 in our web browser. Setup Jenkins to Link Everything First thing first, let's install Jenkins. Follow the instructions on the website, https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu . wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add - sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list' sudo apt-get update sudo apt-get install jenkins Jenkins need JDK and JRE installed to run, install them first if your machine doesn't have them. After installation, check status of Jenkins and make sure it's running, sudo service jenkins status If Jenkins is not running, start it with, sudo service jenkins start Now, open up browser and go to localhost:8080, this is where Jenkins is served. At first time, Jenkins will ask your to create an admin account, just follow the steps to create the admin account. Create a New Build Configuration At Jenkins's home page, click New Item to create an entry for our project. Enter \"hellow world\" for the item name and select Freestyle project . On the next pages, where are a few tabs we need to go through. Under Source Code Management , select Git . A new sub window will appear. Enter \"/git_repo/hello_world.git\" for Repository URL* . This is where we setup our git repository. Leave Credentials as \"none\" as we don't have authentification to access this repository. Leave Brances to build as \"*/master\". Under Build Triggers , check Build periodically , and enter \"H/10 * * * *\" fpr Schedule , this will check for any changes every 10 minutes. Also check Build when a change is pushed to GitHub , this will trigger Jenkins to run whenever a change checked in. Under Build , this is where we will be entering our build script, type in the following, cd /webapps/hello_world python manage.py migrate python manage.py test --noinput hello_world polls sudo systemctl restart apache2 This is also where we can run our test scripts before make our changes live. Click save and we should be good. In the next page, which is also where our project dash board, click Build Now and once its finished, we can see the latest build result under Build History . Make a Simple Change and See It Becomes Live Let's make a change to our source code and test if our Jenkins does the job. cd ~/django_hello_world/hello_world/polls In the \"views.py\" file, we had the code as following, from django.http import HttpResponse def index ( request ): return HttpResponse ( \"Hello, world. You're at the polls index.\" ) from django.http import HttpResponse def index ( request ): return HttpResponse ( \"Hello, world. You're at the polls index. An update on the polls index from Jenkins\" ) Commit and push the new changes, git commit -a git push Now go to localhost:8888, we should be able to see our change becomes live once Jenkins finish the new build. And that's it, we just setup our first continous integration system.","tags":"Jenkins","url":"setup-jenkins-with-django-for-continous-deployment.html","loc":"setup-jenkins-with-django-for-continous-deployment.html"},{"title":"Setup Pelican for Github User Pages","text":"For those who don't know. Github has this Pages utility which allow each user to setup a personal sub-domain under Github, functioning like a personal blog. It uses a unique git repo for each user to server its file content. For details, check out their website, https://pages.github.com . There are two types of Github Pages, Project Pages and User Pages. Setting up Project Pages is straight forward. I will be discussing setting up User Pages and some tricks I used to streamline the publishing process. About Github Pages Files of a Github page reside in a very specific Github repository that is owned and unique to each user. They look like this format, yourname.github.io, where \"yourname\" is your Github name. The repository has to follow this format otherwise, it won't work. Go ahead and create a new repository named yourname.github.io. Once that's setup, you can see it on your Github profile and it is waiting for a init push. Now let's get back to our Pelican project. We don't need to clone it to our local disk. Pushings Pelican Output to Github Repo The idea is basically to push Pelican's output folder to the Github repository we just created. To achive this, we have a great tool called ghp-import . We can install it easily with the following command: pip install ghp-import A normal command using ghp-import is like follows: pelican content -o output -s pelicanconf.py ghp-import output git push git@github.com:username/username.github.io.git gh-pages:master The first line generate all rst documents into our output folder. ghp-import then import this output folder into a git branch called gh-pages. Then the last line push this branch to its remote repository which is our Github User Pages repo, yourname.github.io. gh-pages is our local branch and master is our remote repository branch. Please note that the remote branch must be the master branch for it to work properly. The last command will prompt your enter your username and password. Simply enter that, our output folder should be pushed to the repo successfully. Now open up browser and enter username.github.io and we can see our blog live on the web. Github 2-step Authentification If you have 2-step Authentification setup on Github account, using the git push command might not work for you as it doesn't implement a way for you to enter the second passcode. There are 2 ways to solve this problem, one way is to generate a app hash string passcode from Github and use it while doing git push. It's annoying as we have to keep that somewhere and we need to enter that everytime we perform a push. Another easier way is to generate a ssh and put your public key to github. Github SSH Access There are many tutorials on how to generate a SSH key pair. A SSH key pair contains a private key and a public key. A private key is our personal key and we should alway keep secret. A public key is like a lock that matches our private key. When we need to access some machine remotely, we give public key to remote mahine manager and he can install it to his machine. It's like installing our lock onto his house's front door (in this case, his house would be the machine). So we can get into his house with our prviate key. And of course, he can setup locks that comes from other people, ie his door can have many locks and each lock can open his door. If you are using a linux machine, a quick way to generate a key pair is to use ssh-keygen. ssh-keygen -t rsa -C \"your_email@example.com\" This will generate two files, id_rsa, and id_rsa.pub. Open id_rsa.pub with any text editor and copy its entire content. Now let's put this public key to our Github account so that we can use our private key to access Github. In https://github.com/settings/keys , we have a section to add new public key. Paste everything from public key into \"Key\" section and name \"title\" to \"mySSHKey\". And click on add SSH key. We should be good to go. Next time when we do a git push, it should stop asking us about our password. Streamline With A Script We can stream line the publishing process with a bash script. Let's first go to our project root folder and create a file called pubish. touch publish In this file, let's enter the following content #!/bin/bash pelican content -o output -s pelicanconf.py ghp-import output git push git@github.com:username/username.github.io.git gh-pages:master Making this file executable: chmod +x publish We just created a script to perform the publishing process for us. To publish new content, simply enter this command under project root directory. ./publish It should perform all the task for us.","tags":"Pelican","url":"setup-pelican-for-github-user-pages.html","loc":"setup-pelican-for-github-user-pages.html"},{"title":"Using Pelican for Blogging","text":"Pelican is a popular static website generator written in Python. It saves bloggers from worrying about formats so that they can focus on the content itself. Pelican to bloggers is like Latex to document writters. Pelican take advantage of Markdown and reStructured text (rst) to generated formatted texts. I wrote this website usig rst. Markdown is also a good option as well. Get started Pelican has a great tutorial covering the basic steps to setup a website to play with. http://docs.getpelican.com/en/stable/quickstart.html . Here is a brief summary of that page. Installation To install pelican with pip: pip install pelican If we are using markdown, we can install it with pip too: pip install markdown Create a project A directory must be created for our new project: mkdir -p ~/pelican_tutorial cd pelican_tutorial Once we are in our project directory, we can create a project using the following command: pelican-quickstart Pelican then will ask us a few questions regarding your website. Don't worry if we are not sure on some of these questions, all these options can be changed afterwards. An example of these questions are here: Welcome to pelican-quickstart v3.6.3. This script will help you create a new Pelican-based website. Please answer the following questions so this script can generate the files needed by Pelican. > Where do you want to create your new web site? [ . ] > What will be the title of this web site? my_first_blog > Who will be the author of this web site? haze > What will be the default language of this web site? [ en ] > Do you want to specify a URL prefix? e.g., http://example.com ( Y/n ) n > Do you want to enable article pagination? ( Y/n ) y > How many articles per page do you want? [ 10 ] > What is your time zone? [ Europe/Paris ] > Do you want to generate a Fabfile/Makefile to automate generation and publishing? ( Y/n ) y > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? ( Y/n ) y > Do you want to upload your website using FTP? ( y/N ) n > Do you want to upload your website using SSH? ( y/N ) n > Do you want to upload your website using Dropbox? ( y/N ) n > Do you want to upload your website using S3? ( y/N ) n > Do you want to upload your website using Rackspace Cloud Files? ( y/N ) n > Do you want to upload your website using GitHub Pages? ( y/N ) n Done. Your new project is available at /xxx/pelican_tutorial Create an articles with category Next we are going to create our first post with a category specified. In plelican, each post is a rst file stored within the cotent directory. ~/pelican_tutorial/content Although, categories can be specified within rst file similar to a tag. I prefer to take advantage of folders to put my rst files into each category. In the content folder, if we created folders and put our rst file in each sub folder. Then each folder will be considered as a category. ~/pelican_tutorial/tutorial We just created a tutorial category. And let's create our first post under this category. cd ~/pelican_tutorial/tutorial touch myfirst_tutorial.rst We can then input content to this rst file. For example: My first tutorial ######################## :date: 2016-11-19 11:30 :tags: reStructured text, rst :authors: Haze ===== Title ===== Subtitle -------- This is a paragraph. Save this file, and we are ready to generate our first post into html file. Generate site From site root directory cd ~/pelican_tutorial Run the following code to generate your site: pelican content A folder called output will be generated. This is where our site sits. To see how our site looks like, enter output directory: cd output Run the local pelican server: python -m pelican.server Open up web browser, and type in http://localhost:8000/ , we should see the website served from local directory. Some tips Autosite updates Usually we would like to see our website updates live while we changing the rst file contents, especially during development. This can be achieved by running the following command. make regenerate \"make\" is a script at the project root folder. Don't close terminal after running this command as the script is monitoring our project folder to detect any changes. We can continous editing and saving your rst file. All changes will be reflected on your local website. Althought we need to refresh the page of course. One drawback with this script is that if we have a syntax error in the rst file, it will likely crash the script and we would have to restart it again after fixing the syntax. For popular rst syntax, check out my other post, reStructured Text Syntax . Next up, Setup Pelican for Github User Pages .","tags":"Pelican","url":"using-pelican-for-blogging.html","loc":"using-pelican-for-blogging.html"},{"title":"reStructured Text Syntax","text":"A page with popular reStructured Text Syntax A page with popular reStructured Text Syntax A page with popular reStructured Text Syntax Title Subtitle This is a paragraph. Paragraphs line up at their left edges, and are normally separated by blank lines. Plain text Typical result This is a normal text paragraph. The next paragraph is a code sample: It is not processed in any way, except that the indentation is removed. It can span multiple lines. This is a normal text paragraph again. Bullet lists: This is item 1 This is item 2 Bullets are \"-\", \"*\" or \"+\". Continuing text must be aligned after the bullet and whitespace. Note that a blank line is required before the first item and after the last, but is optional between items. Enumerated lists: This is the first item This is the second item Enumerators are arabic numbers, single letters, or roman numerals List items should be sequentially numbered, but need not start at 1 (although not all formatters will honour the first index). This item is auto-enumerated Definition lists: what Definition lists associate a term with a definition. how The term is a one-line phrase, and the definition is one or more paragraphs or body elements, indented relative to the term. Blank lines are not allowed between term and definition. Authors: Tony J. (Tibs) Ibbs, David Goodger (and sundry other good-natured folks) Version: 1.0 of 2001/08/08 Dedication: To my father. A paragraph containing only two colons indicates that the following indented or quoted text is a literal block. Whitespace, newlines, blank lines, and all kinds of markup (like *this* or \\this) is preserved by literal blocks. The paragraph containing only '::' will be omitted from the result. The :: may be tacked onto the very end of any paragraph. The :: will be omitted if it is preceded by whitespace. The :: will be converted to a single colon if preceded by text, like this: It's very convenient to use this form. Literal blocks end when text returns to the preceding paragraph's indentation. This means that something like this is possible: We start here and continue here and end here. Per-line quoting can also be used on unindented literal blocks: > Useful for quotes from email and > for Haskell literate programming. Grid table: Header 1 Header 2 Header 3 body row 1 column 2 column 3 body row 2 Cells may span columns. body row 3 Cells may span rows. Cells contain blocks. body row 4 Simple table: Inputs Output A B A or B False False False True False True False True True True True True External hyperlinks, like Python . Internal crossreferences, like example .","tags":"reStructuredText","url":"restructured-text-syntax.html","loc":"restructured-text-syntax.html"}]};